<?xml version="1.0" encoding="UTF-8"?>
<!-- origin at X=0.0 Y=0.0 -->
<bpmn2:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn2="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:ext="http://org.eclipse.bpmn2/ext" xmlns:xs="http://www.w3.org/2001/XMLSchema" id="Definitions_1" exporter="org.eclipse.bpmn2.modeler.core" exporterVersion="1.3.1.Final-v20161006-1425-B58" targetNamespace="http://org.eclipse.bpmn2/default/process">
  <bpmn2:process id="Consulta0101" name="Default Process" isExecutable="false">
    <bpmn2:startEvent id="StartEvent_1" name="Start Event 1">
      <bpmn2:outgoing>SequenceFlow_19</bpmn2:outgoing>
    </bpmn2:startEvent>
    <bpmn2:serviceTask id="ServiceTask_9" name="PCCGetSubscriberAllInfTask" implementation="##WebService">
      <bpmn2:incoming>SequenceFlow_20</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_15</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_14">
        <bpmn2:dataInput id="DataInput_19" name="USR_IDENTIFIER"/>
        <bpmn2:dataInput id="DataInput_20" name="TYPE"/>
        <bpmn2:dataInput id="DataInput_21" name="PCCGetSubscriberAllInfTask__failOverPolicy"/>
        <bpmn2:dataOutput id="DataOutput_54" name="JSON"/>
        <bpmn2:dataOutput id="DataOutput_55" name="errorCode"/>
        <bpmn2:dataOutput id="DataOutput_56" name="message"/>
        <bpmn2:dataOutput id="DataOutput_57" name="platformError"/>
        <bpmn2:inputSet id="InputSet_10" name="Input Set 5">
          <bpmn2:dataInputRefs>DataInput_20</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_19</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_21</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_11" name="Output Set 10">
          <bpmn2:dataOutputRefs>DataOutput_54</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_55</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_56</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_57</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_19">
        <bpmn2:targetRef>DataInput_19</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_75">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_151">'504' + subscriberId</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_152">DataInput_4</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_20">
        <bpmn2:targetRef>DataInput_20</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_76">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_153">'TRUE'</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_154">DataInput_10</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_21">
        <bpmn2:targetRef>DataInput_21</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_77">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_155">false</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_156">DataInput_1</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_54">
        <bpmn2:sourceRef>DataOutput_54</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_78">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_157">DataOutput_39</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_158">vPaqInfo</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_55">
        <bpmn2:sourceRef>DataOutput_55</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_79">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_159">DataOutput_13</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_160">vErrorCodePcc</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_56">
        <bpmn2:sourceRef>DataOutput_56</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_80">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_161">DataOutput_15</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_162">vMessageErrorPcc</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_57">
        <bpmn2:sourceRef>DataOutput_57</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_81">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_163">DataOutput_16</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_164">vPlatformErrorPcc</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
    </bpmn2:serviceTask>
    <bpmn2:scriptTask id="ScriptTask_2" name="Transform">
      <bpmn2:incoming>SequenceFlow_16</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_17</bpmn2:outgoing>
      <bpmn2:script>var plMultiQuota = false;
if (typeof (MULTI_LST) != 'undefined') {
	multiQuotasLst = MULTI_LST;
}
if (typeof (ORIGEN) != 'undefined') {
	plMultiQuota = multiQuotasLst.toUpperCase().indexOf(ORIGEN.toUpperCase()) >= 0;
}

var navObject = {};

var PCCAllServices = {Services: new Object(),User:new Object()};

var JSON_RESPONSE = '';

if (typeof vPaqInfo != 'undefined') {

	navObject.obj = processJson(vPaqInfo);

LOGGER.info(tLinea+'navObject.obj:'+JSON.stringify(navObject.obj)+tLinea);

	if (typeof navObject.obj.Plans != 'undefined') {

		PCCAllServices.Services.Plans = setPlanServices(navObject.obj);
	}

	if (typeof navObject.obj.Applications != 'undefined') {
		PCCAllServices.Services.Apps = setAppsServices(navObject.obj);
	}


	if (typeof navObject.obj.Unbound != 'undefined') {
		PCCAllServices.Services.Default = setDefServices(navObject.obj);
	}

	PCCAllServices.User.subscriberId = subscriberId.toString();
	PCCAllServices.User.billCycle=navObject.obj.User.SubscriberBillCycle.toString();
}
else{
	PCCAllServices.User.subscriberId='Cliente No Existe en PCC';
}





function setPlanServices(navObjectPCC) {
	var PCCPlanItems = navObjectPCC.Plans;
	var PCCPlans = new Array();
	var TempPlanItem = new Object();
	var billCycle = typeof (navObjectPCC.User.SubscriberBillCycle) != 'undefined' ? navObjectPCC.User.SubscriberBillCycle : &quot;-&quot;;
	var TempItem = new Array();

	if(PCCPlanItems instanceof Array){
	for (var i = 0; i &lt; PCCPlanItems.length; i++) {
		TempItem = PCCPlanItems[i];
		TempPlanItem.prname = TempItem.ProductName;
		TempPlanItem.srvname = TempItem.ServiceName;
		TempPlanItem.stardate = billCycle != &quot;-&quot; ? getCycleDate(new Number(billCycle)) : billCycle;

		if (typeof TempItem.ServiceEndDate != 'undefined' &amp;&amp; TempItem.ServiceEndDate != '-1') {
			TempPlanItem.enddate = TempItem.ServiceEndDate;
		} else {
			TempPlanItem.enddate = &quot;-&quot;;
		}
		PCCPlans.push(TempPlanItem);
		TempPlanItem=new Object();

	}
	}
	else{
		TempItem=PCCPlanItems;
		TempPlanItem.prname = TempItem.ProductName;
		TempPlanItem.srvname = TempItem.ServiceName;
		TempPlanItem.stardate = billCycle != &quot;-&quot; ? getCycleDate(new Number(billCycle)) : billCycle;

		if (typeof TempItem.ServiceEndDate != 'undefined' &amp;&amp; TempItem.ServiceEndDate != '-1') {
			TempPlanItem.enddate = TempItem.ServiceEndDate;
		} else {
			TempPlanItem.enddate = &quot;-&quot;;
		}
		PCCPlans=TempPlanItem;
	}

	return PCCPlans;
}

function setAppsServices(navObjectPCC) {
	var PCCAppsItems = navObjectPCC.Applications;
	var PCCApps = new Array();
	var TempAppsItem = new Object();
	var billCycle = typeof (navObjectPCC.User.SubscriberBillCycle) != 'undefined' ? navObjectPCC.User.SubscriberBillCycle : &quot;-&quot;;
	var TempItem = new Array();

	if(PCCAppsItems instanceof Array){
	for (var i = 0; i &lt; PCCAppsItems.length; i++) {
		TempItem = PCCAppsItems[i];
		//Apps
		TempAppsItem.prname = TempItem.ProductName;
		TempAppsItem.srvname = TempItem.ServiceName;
		TempAppsItem.stardate = billCycle != &quot;-&quot; ? getCycleDate(new Number(billCycle)) : billCycle;

		if (typeof TempItem.ServiceEndDate != 'undefined' &amp;&amp; TempItem.ServiceEndDate != '-1') {
			TempAppsItem.enddate = TempItem.ServiceEndDate;
		} else {
			TempAppsItem.enddate = &quot;-&quot;;
		}

		PCCApps.push(TempAppsItem);
		TempAppsItem=new Object();

	}
	}
	else{
		TempItem=PCCAppsItems;
		TempAppsItem.prname = TempItem.ProductName;
		TempAppsItem.srvname = TempItem.ServiceName;
		TempAppsItem.stardate = billCycle != &quot;-&quot; ? getCycleDate(new Number(billCycle)) : billCycle;

		if (typeof TempItem.ServiceEndDate != 'undefined' &amp;&amp; TempItem.ServiceEndDate != '-1') {
			TempAppsItem.enddate = TempItem.ServiceEndDate;
		} else {
			TempAppsItem.enddate = &quot;-&quot;;
		}
		PCCApps=TempAppsItem;
	}

	return PCCApps;
}

function setDefServices(navObjectPCC) {
	var PCCDefItems = navObjectPCC.Unbound;
	var PCCDef = new Array();
	var TempDefItem = new Object();
	var billCycle = typeof (navObjectPCC.User.SubscriberBillCycle) != 'undefined' ? navObjectPCC.User.SubscriberBillCycle : &quot;-&quot;;
	var TempItem = new Array();
	var vBaseServices = 'Base_Service_OCS_Pos_SY_FUP,Base_Service_OCS_Pos_SY';

	if(PCCDefItems instanceof Array){
	for (var i = 0; i &lt; PCCDefItems.length; i++) {
		TempItem = PCCDefItems[i];
		//Apps

		if (vBaseServices.indexOf(TempItem.ServiceName) &lt; 0) {
			TempDefItem.prname = TempItem.ProductName;
			
		} else {
			TempDefItem.prname = 'Servicio Base PCC-CBS';
		}

		TempDefItem.srvname = TempItem.ServiceName;
		TempDefItem.stardate = billCycle != &quot;-&quot; ? getCycleDate(new Number(billCycle)) : billCycle;

		if (typeof TempItem.ServiceEndDate != 'undefined' &amp;&amp; TempItem.ServiceEndDate != '-1') {
			TempDefItem.enddate = TempItem.ServiceEndDate;
		} else {
			TempDefItem.enddate = &quot;-&quot;;
		}

		PCCDef.push(TempDefItem);
		TempDefItem=new Object();


	}
	}
	else{
		TempItem=PCCDefItems;
		if (vBaseServices.indexOf(TempItem.ServiceName) &lt; 0) {
			TempDefItem.prname = TempItem.ProductName;
			
		} else {
			TempDefItem.prname = 'Servicio Base PCC-CBS';
		}

		TempDefItem.srvname = TempItem.ServiceName;
		TempDefItem.stardate = billCycle != &quot;-&quot; ? getCycleDate(new Number(billCycle)) : billCycle;

		if (typeof TempItem.ServiceEndDate != 'undefined' &amp;&amp; TempItem.ServiceEndDate != '-1') {
			TempDefItem.enddate = TempItem.ServiceEndDate;
		} else {
			TempDefItem.enddate = &quot;-&quot;;
		}
		PCCDef=TempDefItem;
	}

	return PCCDef;
}

function getCycleDate(billingDay) {
	var vSysDate = new Date();
	var vNow = new Date(vSysDate.getTime());
	var addMonth = true;
	var vMonth = '0';
	var vAdd = billingDay > 1 ? 2 : 1;
	if (vNow.getDate() > billingDay) {
		vNow.setMonth(vNow.getMonth() + vAdd);
		addMonth = false;
	}
	vMonth = addMonth ? String((vNow.getMonth() + 1)) : String(vNow.getMonth());
	vNow.setDate(billingDay - 1);
	return padStr(vNow.getFullYear(), 4, '0', STR_PAD_LEFT) + '' + padStr(vMonth, 2, '0', STR_PAD_LEFT) + '' + padStr(String(vNow.getDate()), 2, '0', STR_PAD_LEFT) + '' + padStr(String(23), 2, '0', STR_PAD_LEFT) + '' + padStr(String(59), 2, '0', STR_PAD_LEFT) + '' + padStr(String(59), 2, '0', STR_PAD_LEFT);
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:scriptTask id="ScriptTask_6" name="SetResponse">
      <bpmn2:incoming>SequenceFlow_17</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_8</bpmn2:outgoing>
      <bpmn2:script>var BPMN_RESPONSE_CODE = '0';
var BPMN_RESPONSE_MESSAGE = 'Operation Successful';
JSON_RESPONSE = JSON.stringify(PCCAllServices);</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:endEvent id="EndEvent_2" name="End Event 2">
      <bpmn2:incoming>SequenceFlow_8</bpmn2:incoming>
    </bpmn2:endEvent>
    <bpmn2:sequenceFlow id="SequenceFlow_8" sourceRef="ScriptTask_6" targetRef="EndEvent_2"/>
    <bpmn2:scriptTask id="ScriptTask_7" name="PCCFunctions">
      <bpmn2:incoming>SequenceFlow_15</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_16</bpmn2:outgoing>
      <bpmn2:script>function processJson(strJsonInfo){
    var vSubscribedServices;
    var vSubscriberQuotas;
    var vSubscriber;
    var vJsonObj;
    var vDataObj = new Object();
    var vTmpObj = new Object();
    if(typeof strJsonInfo != 'undefined'){
        vJsonObj = JSON.parse(strJsonInfo);
        LOGGER.info(tLinea+'vJsonObj:'+vJsonObj+tLinea);
        if(vJsonObj.getSubscriberAllInfResponse.result.resultCode == 0){
            vSubscriber = vJsonObj.getSubscriberAllInfResponse.result.subscriber;
            if(typeof vJsonObj.getSubscriberAllInfResponse.result.subscribedService != 'undefined'){
                vSubscribedServices = vJsonObj.getSubscriberAllInfResponse.result.subscribedService;
                vSubscriberQuotas = vJsonObj.getSubscriberAllInfResponse.result.subscriberQuota;
                if(vSubscribedServices instanceof Array){
                  for(var i = 0; i &lt; vSubscribedServices.length; i++){
                    vDataObj = setDataProperties(joinInfo(vSubscribedServices[i], vSubscriberQuotas), vDataObj);
                  }
                } else {
                  vDataObj = setDataProperties(joinInfo(vSubscribedServices, vSubscriberQuotas), vDataObj);
                }
            }
            vDataObj.User = joinInfo(undefined, undefined, vSubscriber);
        }
    }

    return vDataObj;
}
function getAttribute(serviceItems, attribute){
    var attributeItem = {key: 'NA', value: 'NA'};
    if(typeof serviceItems != 'undefined'){
        for(var i = 0; i &lt; serviceItems.attribute.length; i++){
            if(serviceItems.attribute[i].key == attribute){
                attributeItem = serviceItems.attribute[i];
                break;
            }
        }
    }
    return attributeItem;
}
function getQuota(quotaItems, serviceName){
    var quotaItem = new Array();
    if(typeof(quotaItems) != 'undefined'){
        if(quotaItems instanceof Array){
            for(var i = 0; i &lt; quotaItems.length; i++){
                if(getAttribute(quotaItems[i], 'SRVNAME').value == serviceName){
                    quotaItem.push(quotaItems[i]);
                }
            }
        } else {
            if(getAttribute(quotaItems, 'SRVNAME').value == serviceName){
                quotaItem.push(quotaItems);
            }
        }
    }
    return quotaItem;
}
function getUniqueQuota(quotaItems){
    var quotaItem;
    if(typeof(quotaItems) != 'undefined'){
        if(quotaItems instanceof Array){
            for(var i = 0; i &lt; quotaItems.length; i++){
                if(quotaBL.toUpperCase().indexOf(getAttribute(quotaItems[i], 'QTANAME').value.toUpperCase()) &lt; 0){
                    quotaItem = quotaItems[i];
                    break;
                }
            }
        } else {
            if(quotaBL.toUpperCase().indexOf(getAttribute(quotaItems, 'QTANAME').value.toUpperCase()) &lt; 0){
                quotaItem = quotaItems;
            }
        }
    }
    return quotaItem;
}
function joinInfo(serviceItem, quotaItem, subscriberItem){
    var tmpObj = new Object();
    var itemTmp;
    var quotaArray = new Array();
    var tmpQuotaArray = new Array();
    var quotaObj;
    var tmpQuota = new Object();
    tmpObj.ServiceName = getAttribute(serviceItem, 'SRVNAME').value;
    tmpObj.ProductName = getAttribute(serviceItem, 'SRVPRODUCTNAME').value;
    quotaArray = getQuota(quotaItem, tmpObj.ServiceName);
    itemTmp = getAttribute(serviceItem, 'SRVPRODUCTTYPE');
    tmpObj.ServiceType = tmpObj.ServiceName == 'Default_Service_Local' ? 'DEF' : itemTmp.value;

	//agregar servicios bases
    itemTmp = getAttribute(serviceItem, 'SRVPRODUCTTYPEID');
    tmpObj.ServiceTypeId = itemTmp.value;
    tmpObj.ServiceExpired = getAttribute(serviceItem, 'SRVISEXPIRED').value;
    tmpObj.ServiceStartDate = getAttribute(serviceItem, 'SRVSTARTDATETIME').value;
    tmpObj.ServiceEndDate = getAttribute(serviceItem, 'SRVENDDATETIME').value;
    if(!plMultiQuota){
        if(quotaArray.length > 0){
            quotaObj = getUniqueQuota(quotaArray);
        }
        tmpObj.QuotaName = getAttribute(quotaObj, 'QTANAME').value;
        tmpObj.QuotaValue = getAttribute(quotaObj, 'QTAVALUE').value;
        tmpObj.QuotaBalance = getAttribute(quotaObj, 'QTABALANCE').value;
        tmpObj.QuotaConsumption = getAttribute(quotaObj, 'QTACONSUMPTION').value;
        tmpObj.QuotaValueMb = getAttribute(quotaObj, 'QTAVALUE_MB').value;
        tmpObj.QuotaBalanceMb = getAttribute(quotaObj, 'QTABALANCE_MB').value;
        tmpObj.QuotaConsumptionMb = getAttribute(quotaObj, 'QTACONSUMPTION_MB').value;
        tmpObj.QuotaPercentage = getAttribute(quotaObj, 'QTAPERCENTAGE').value;
        tmpObj.QuotaStatus = getAttribute(quotaObj, 'QTASTATUS').value;
        tmpObj.SubscriberBillCycle = getAttribute(subscriberItem, 'USRBILLCYCLEDATE').value;
    } else {
        if(tmpObj.ServiceType == 'PL'){
            for(var i = 0; i &lt; quotaArray.length; i++){
                tmpQuota.QuotaName = getAttribute(quotaArray[i], 'QTANAME').value;
                tmpQuota.QuotaValue = getAttribute(quotaArray[i], 'QTAVALUE').value;
                tmpQuota.QuotaBalance = getAttribute(quotaArray[i], 'QTABALANCE').value;
                tmpQuota.QuotaConsumption = getAttribute(quotaArray[i], 'QTACONSUMPTION').value;
                tmpQuota.QuotaValueMb = getAttribute(quotaArray[i], 'QTAVALUE_MB').value;
                tmpQuota.QuotaBalanceMb = getAttribute(quotaArray[i], 'QTABALANCE_MB').value;
                tmpQuota.QuotaConsumptionMb = getAttribute(quotaArray[i], 'QTACONSUMPTION_MB').value;
                tmpQuota.QuotaPercentage = getAttribute(quotaArray[i], 'QTAPERCENTAGE').value;
                tmpQuota.QuotaStatus = getAttribute(quotaArray[i], 'QTASTATUS').value;
                tmpQuotaArray.push(tmpQuota);
                tmpQuota = new Object();
            }
            tmpObj.Quotas = tmpQuotaArray;
        } else {
            if(quotaArray.length > 0){
                quotaObj = getUniqueQuota(quotaArray);
            }
            tmpObj.QuotaName = getAttribute(quotaObj, 'QTANAME').value;
            tmpObj.QuotaValue = getAttribute(quotaObj, 'QTAVALUE').value;
            tmpObj.QuotaBalance = getAttribute(quotaObj, 'QTABALANCE').value;
            tmpObj.QuotaConsumption = getAttribute(quotaObj, 'QTACONSUMPTION').value;
            tmpObj.QuotaValueMb = getAttribute(quotaObj, 'QTAVALUE_MB').value;
            tmpObj.QuotaBalanceMb = getAttribute(quotaObj, 'QTABALANCE_MB').value;
            tmpObj.QuotaConsumptionMb = getAttribute(quotaObj, 'QTACONSUMPTION_MB').value;
            tmpObj.QuotaPercentage = getAttribute(quotaObj, 'QTAPERCENTAGE').value;
            tmpObj.QuotaStatus = getAttribute(quotaObj, 'QTASTATUS').value;
            tmpObj.SubscriberBillCycle = getAttribute(subscriberItem, 'USRBILLCYCLEDATE').value;
        }
    }
    return tmpObj;
}
function setDataProperties(objItem, dataItem){
    switch(objItem.ServiceType){
        case 'PAQ':
            dataItem.Packages = objItem;
            break;
        case 'SUS':
            dataItem.Subscriptions = objItem;
            break;
        case 'PL':
			if(typeof dataItem.Plans=='undefined'){
				dataItem.Plans=new Array();
			}
            dataItem.Plans.push(objItem);
            break;
        case 'APP':
            if(typeof dataItem.Applications == 'undefined'){
                dataItem.Applications = new Array();
            }
            dataItem.Applications.push(objItem);
            break;
        case 'ADD':
            if(typeof dataItem.Addons == 'undefined'){
                dataItem.Addons = new Array();
            }
            dataItem.Addons.push(objItem);
            break;
        case 'DEF':
		if(typeof dataItem.DefaultService =='undefined'){
			dataItem.DefaultService=new Array();
		}
            dataItem.DefaultService.push(objItem);
            break;
        case 'SUB':
            dataItem.User = objItem;
            break;
        default:
            if(typeof dataItem.Unbound == 'undefined'){
                dataItem.Unbound = new Array();
            }
            dataItem.Unbound.push(objItem);
    }
    return dataItem;
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_15" sourceRef="ServiceTask_9" targetRef="ScriptTask_7"/>
    <bpmn2:sequenceFlow id="SequenceFlow_16" sourceRef="ScriptTask_7" targetRef="ScriptTask_2"/>
    <bpmn2:sequenceFlow id="SequenceFlow_17" sourceRef="ScriptTask_2" targetRef="ScriptTask_6"/>
    <bpmn2:scriptTask id="ScriptTask_8" name="InitValues">
      <bpmn2:incoming>SequenceFlow_19</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_20</bpmn2:outgoing>
      <bpmn2:script>var STR_PAD_LEFT = 1;
var STR_PAD_RIGHT = 2;
var STR_PAD_BOTH = 3;
var BPMN_RESPONSE_CODE = '100';
var BPMN_RESPONSE_MESSAGE = 'Error durante el proceso.';
var vSysDate = new Date();
var strPackBalance = 'C_Internet_Pack';
var strPlanBalance = 'C_Data_Include';
var strSusBalance = 'C_Internet_Suscripcion';
var strAddonBalance = 'C_Data_Add';
var forCounter = 0;
var forPlanCounter=0;
var doLoop = false;
var doPlanLoop=false;
var vAddonProfile = '110';
var plMultiQuota = false;
var multiQuotasLst = 'NXS';
var quotaBL = 'TEST_FUP_APP_FACEBOOK Quota';
var vSkipBundle = false;
var vSkipChannels = '30';
var vUnifyAppsChannels = '30';
var vUnifyApps = false;
var vChannelPC = '30';

if(typeof(CHANNELS) != 'undefined'){
    vSkipChannels = CHANNELS;
}
if(typeof(CHANNEL_PC) != 'undefined'){
    vChannelPC = CHANNEL_PC;
}
if(typeof(CHANNELS_APP) != 'undefined'){
    vUnifyAppsChannels = CHANNELS_APP;
}
if(typeof(QUOTA_BL) != 'undefined'){
    quotaBL = QUOTA_BL;
}
if(typeof(MULTI_LST) != 'undefined'){
    multiQuotasLst = MULTI_LST;
}
if(typeof(ORIGEN) != 'undefined'){
    plMultiQuota = multiQuotasLst.toUpperCase().indexOf(ORIGEN.toUpperCase()) >= 0;
}
vSkipBundle = checkChannels(vSkipChannels);
vUnifyApps = checkChannels(vUnifyAppsChannels);

function checkChannels(channelLst){
    var chnnlArray = channelLst.split(',');
    var flag = false;
    for(var i = 0; i &lt; chnnlArray.length; i++){
        if(chnnlArray[i] == channelId){
            flag = true;
            break;
        }
    }
    return flag;
}

//Funcion a la cual se le manda un valor y le hace lpad o rpad con el caracter indicado y la longitud indicada
function padStr(str, len, pad, dir) {
    if (typeof(len) == 'undefined') { var len = 0; };
    if (typeof(pad) == 'undefined') { var pad = ' '; };
    if (typeof(dir) == 'undefined') { var dir = STR_PAD_RIGHT; };
    if (len + 1 >= str.length) {
        switch (dir){
            case STR_PAD_LEFT:
                str = Array(len + 1 - str.length).join(pad) + str;
            break;
            case STR_PAD_BOTH:
                var right = Math.ceil((padlen = len - str.length) / 2);
                var left = padlen - right;
                str = Array(left+1).join(pad) + str + Array(right+1).join(pad);
            break;
            default:
                str = str + Array(len + 1 - str.length).join(pad);
            break;
        } // switch
    }
    return str;
}
//Convierte un valor texto a al formato yyyyMMddhhmiss
function parseDateToStringCBS(date){
    var day = padStr(String(date.getDate()), 2, '0', STR_PAD_LEFT);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    month = padStr(String(month), 2, '0', STR_PAD_LEFT);
    var hours = padStr(String(date.getHours()), 2, '0', STR_PAD_LEFT);
    var minutes = padStr(String(date.getMinutes()), 2, '0', STR_PAD_LEFT);
    var seconds = padStr(String(date.getSeconds()), 2, '0', STR_PAD_LEFT);
    var format = year + '' + month + '' + day + '' + hours + '' + minutes + '' + seconds;
    return format;
}
//Convierte un Time a un string de Date en formato yyyy-MM-ddThh:mm:ss.000-06:00
function parseTimeToDate(date, timeZone) {
    var strDate = parseDateToString(date);
    strDate = timeZone ? strDate.replace(' ','T') + '.000-06:00' : strDate.replace(' ','T');    
    return strDate;
}
//Transforma un string con formato de fecha a un objeto Date
function parseStringToDate (strDate) {
    strDate = strDate.replace(/\D/g,' ');
    var dateArray = strDate.split(' ');
    var year = dateArray[0];
    var month = dateArray[1] - 1;
    var day = dateArray[2];
    var hours = dateArray[3];
    var minutes = dateArray[4];
    var seconds = dateArray[5];
    return new Date(year,month,day,hours,minutes,seconds);
}

//Convierte '22/02/2018 23:59:59' 

function parseStringToDate_2 (strDate) {
    strDate = strDate.replace(/\D/g,' ');
    var dateArray = strDate.split(' ');
     var day = dateArray[0];
  var month = dateArray[1]-1;
  var year = dateArray[2];  
    
    var hours = dateArray[3];
    var minutes = dateArray[4];
    var seconds = dateArray[5];
    return new Date(year,month,day,hours,minutes,seconds);
}

//Convierte un valor texto a al formato yyyy-MM-dd hh:mm:ss
function parseDateToString(date){
    var day = padStr(String(date.getDate()), 2, '0', STR_PAD_LEFT);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    month = padStr(String(month), 2, '0', STR_PAD_LEFT);
    var hours = padStr(String(date.getHours()), 2, '0', STR_PAD_LEFT);
    var minutes = padStr(String(date.getMinutes()), 2, '0', STR_PAD_LEFT);
    var seconds = padStr(String(date.getSeconds()), 2, '0', STR_PAD_LEFT);
    var format = year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
    return format;
}
function getCbsDate(cbsDate){
    var vYear = cbsDate.substring(0, 4);
    var vMonth = new Number(cbsDate.substring(4, 6)) - 1;
    var vDay = cbsDate.substring(6, 8);
    var vHours = cbsDate.substring(8, 10);
    var vMinutes = cbsDate.substring(10, 12);
    var vSeconds = cbsDate.substring(12, 14);
    return new Date(vYear,vMonth,vDay,vHours,vMinutes,vSeconds);
}


var tSaltoL = '\n';

var tLinea = tSaltoL + '************************************************************************' + tSaltoL ;</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_19" sourceRef="StartEvent_1" targetRef="ScriptTask_8"/>
    <bpmn2:sequenceFlow id="SequenceFlow_20" sourceRef="ScriptTask_8" targetRef="ServiceTask_9"/>
  </bpmn2:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1" name="Default Process Diagram">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="Consulta0101">
      <bpmndi:BPMNShape id="BPMNShape_1" bpmnElement="StartEvent_1">
        <dc:Bounds height="36.0" width="36.0" x="63.0" y="35.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_1" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="68.0" x="47.0" y="71.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ServiceTask_7" bpmnElement="ServiceTask_9">
        <dc:Bounds height="50.0" width="110.0" x="171.0" y="112.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_32" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="45.0" width="95.0" x="178.0" y="114.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_5" bpmnElement="ScriptTask_2" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="500.0" y="112.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_8" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="57.0" x="526.0" y="129.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_6" bpmnElement="ScriptTask_6" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="650.0" y="112.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_10" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="76.0" x="667.0" y="129.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_EndEvent_1" bpmnElement="EndEvent_2">
        <dc:Bounds height="36.0" width="36.0" x="815.0" y="119.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_12" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="65.0" x="801.0" y="155.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_7" bpmnElement="ScriptTask_7" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="330.0" y="112.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_15" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="80.0" x="345.0" y="129.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_8" bpmnElement="ScriptTask_8" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="171.0" y="28.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_30" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="54.0" x="199.0" y="45.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_7" bpmnElement="SequenceFlow_8" sourceElement="BPMNShape_ScriptTask_6" targetElement="BPMNShape_EndEvent_1">
        <di:waypoint xsi:type="dc:Point" x="760.0" y="137.0"/>
        <di:waypoint xsi:type="dc:Point" x="787.0" y="137.0"/>
        <di:waypoint xsi:type="dc:Point" x="815.0" y="137.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_14"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_15" bpmnElement="SequenceFlow_15" sourceElement="BPMNShape_ServiceTask_7" targetElement="BPMNShape_ScriptTask_7">
        <di:waypoint xsi:type="dc:Point" x="281.0" y="137.0"/>
        <di:waypoint xsi:type="dc:Point" x="305.0" y="137.0"/>
        <di:waypoint xsi:type="dc:Point" x="330.0" y="137.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_16"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_16" bpmnElement="SequenceFlow_16" sourceElement="BPMNShape_ScriptTask_7" targetElement="BPMNShape_ScriptTask_5">
        <di:waypoint xsi:type="dc:Point" x="440.0" y="137.0"/>
        <di:waypoint xsi:type="dc:Point" x="470.0" y="137.0"/>
        <di:waypoint xsi:type="dc:Point" x="500.0" y="137.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_17"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_17" bpmnElement="SequenceFlow_17" sourceElement="BPMNShape_ScriptTask_5" targetElement="BPMNShape_ScriptTask_6">
        <di:waypoint xsi:type="dc:Point" x="610.0" y="137.0"/>
        <di:waypoint xsi:type="dc:Point" x="630.0" y="137.0"/>
        <di:waypoint xsi:type="dc:Point" x="650.0" y="137.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_18"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_20" bpmnElement="SequenceFlow_19" sourceElement="BPMNShape_1" targetElement="BPMNShape_ScriptTask_8">
        <di:waypoint xsi:type="dc:Point" x="99.0" y="53.0"/>
        <di:waypoint xsi:type="dc:Point" x="135.0" y="53.0"/>
        <di:waypoint xsi:type="dc:Point" x="171.0" y="53.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_33"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_21" bpmnElement="SequenceFlow_20" sourceElement="BPMNShape_ScriptTask_8" targetElement="BPMNShape_ServiceTask_7">
        <di:waypoint xsi:type="dc:Point" x="226.0" y="78.0"/>
        <di:waypoint xsi:type="dc:Point" x="226.0" y="95.0"/>
        <di:waypoint xsi:type="dc:Point" x="226.0" y="112.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_36"/>
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
    <bpmndi:BPMNLabelStyle id="BPMNLabelStyle_1">
      <dc:Font name="arial" size="9.0"/>
    </bpmndi:BPMNLabelStyle>
  </bpmndi:BPMNDiagram>
</bpmn2:definitions>