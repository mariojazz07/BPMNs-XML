<?xml version="1.0" encoding="UTF-8"?>
<!-- origin at X=0.0 Y=0.0 -->
<bpmn2:definitions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bpmn2="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:dc="http://www.omg.org/spec/DD/20100524/DC" xmlns:di="http://www.omg.org/spec/DD/20100524/DI" xmlns:ext="http://org.eclipse.bpmn2/ext" xmlns:xs="http://www.w3.org/2001/XMLSchema" id="Definitions_1" exporter="org.eclipse.bpmn2.modeler.core" exporterVersion="1.3.1.Final-v20161006-1425-B58" targetNamespace="http://org.eclipse.bpmn2/default/process">
  <bpmn2:process id="ConsultaDatos2" name="Default Process" isExecutable="false">
    <bpmn2:startEvent id="StartEvent_1" name="Start Event 1">
      <bpmn2:outgoing>SequenceFlow_6</bpmn2:outgoing>
    </bpmn2:startEvent>
    <bpmn2:endEvent id="EndEvent_1" name="End Event 1">
      <bpmn2:incoming>SequenceFlow_3</bpmn2:incoming>
    </bpmn2:endEvent>
    <bpmn2:serviceTask id="ServiceTask_2" name="PCCGetSubscriberAllInfTask" implementation="##WebService">
      <bpmn2:incoming>SequenceFlow_11</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_12</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_2">
        <bpmn2:dataInput id="DataInput_4" name="USR_IDENTIFIER"/>
        <bpmn2:dataInput id="DataInput_5" name="TYPE"/>
        <bpmn2:dataInput id="DataInput_6" name="PCCGetSubscriberAllInfTask__failOverPolicy"/>
        <bpmn2:dataInput id="DataInput_26" name="PCCGetSubscriberAllInfTask__retryPolicyNumber"/>
        <bpmn2:dataOutput id="DataOutput_93" name="JSON"/>
        <bpmn2:inputSet id="InputSet_3" name="Input Set 5">
          <bpmn2:dataInputRefs>DataInput_5</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_4</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_6</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_26</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_3" name="Output Set 10">
          <bpmn2:dataOutputRefs>DataOutput_93</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_4">
        <bpmn2:targetRef>DataInput_4</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_8">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_15">'504' + subscriberId</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_16">DataInput_4</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_5">
        <bpmn2:targetRef>DataInput_5</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_9">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_17">'TRUE'</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_18">DataInput_10</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_6">
        <bpmn2:targetRef>DataInput_6</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_10">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_19">false</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_20">DataInput_1</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_26">
        <bpmn2:targetRef>DataInput_26</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_47">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_104">0</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_102">DataInput_26</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_93">
        <bpmn2:sourceRef>DataOutput_93</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_113">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_229">DataOutput_93</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_231">vStrPcc</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
    </bpmn2:serviceTask>
    <bpmn2:scriptTask id="ScriptTask_2" name="CbsFunctions">
      <bpmn2:incoming>SequenceFlow_7</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_8</bpmn2:outgoing>
      <bpmn2:script>function getJSON(strJson){
    var vExpr = '([b,c,s]+|[t*,n,s,(0-9)*]+|[v,(0-9)*]+):';
    var vNumExpr = '(&quot;[a-z]+&quot;:)([0-9]+)(\s*,|}|$)';
    var regEx;
    var numRegExp;
    var tmpJson = '';
    if(typeof REG_EXP != 'undefined'){
        vExpr = REG_EXP;
    }
    regEx = new RegExp(vExpr, 'gi');
    numRegExp = new RegExp(vNumExpr, 'gmi');
    tmpJson = strJson.replace(regEx, '');
    tmpJson = tmpJson.replace(numRegExp, '$1&quot;$2&quot;$3');
    return JSON.parse(tmpJson);
}

function getBillCycleCBS(jsonObj){
    var vBillingCycle='-';
    var vSubscriberAccount;
    if(typeof jsonObj.QueryCustomerInfoResultMsg!='undefined'){
        vSubscriberAccount=jsonObj.QueryCustomerInfoResultMsg.QueryCustomerInfoResult.Account;
        if(vSubscriberAccount instanceof Array){
                vBillingCycle=vSubscriberAccount[0].AcctInfo.BillCycleType;
        }
        else{
            vBillingCycle=vSubscriberAccount.AcctInfo.BillCycleType;
        }
    }

    return vBillingCycle;

}

function getPrimaryOfferings(validOfferings, jsonObj){
    var offeringObj;
    var primaryOffering;
    var vItem;
    var vOfferingItem;
    var vOfferings = new Array();
    if(typeof(jsonObj.QueryCustomerInfoResultMsg) != 'undefined'){
        primaryOffering = jsonObj.QueryCustomerInfoResultMsg.QueryCustomerInfoResult.Subscriber.PrimaryOffering;
    }
    if(typeof(primaryOffering) != 'undefined'){
        if(primaryOffering instanceof Array){
            for(var i = 0; i &lt; primaryOffering.length; i++){
                vItem = primaryOffering[i];
                vOfferingItem = vItem.OfferingKey;
                if(typeof(vOfferingItem) != 'undefined'){
                    if(isValidOffering(validOfferings, vOfferingItem.OfferingID) || validOfferings == ''){
                        vOfferings.push(vItem);
                    }
                }
            }
        } else {
            vOfferingItem = primaryOffering.OfferingKey;
            if(typeof(vOfferingItem) != 'undefined'){
                if(isValidOffering(validOfferings, vOfferingItem.OfferingID) || validOfferings == ''){
                    vOfferings.push(primaryOffering);
                }
            }
        }
    }
    return vOfferings;



}

function getSupplementaryOfferings(validOfferings, jsonObj){
    var offeringObj;
    var supplementaryOfferings;
    var vItem;
    var vOfferingItem;
    var vOfferings = new Array();
    if(typeof(jsonObj.QueryCustomerInfoResultMsg) != 'undefined'){
        supplementaryOfferings = jsonObj.QueryCustomerInfoResultMsg.QueryCustomerInfoResult.Subscriber.SupplementaryOffering;
    }
    if(typeof(supplementaryOfferings) != 'undefined'){
        if(supplementaryOfferings instanceof Array){
            for(var i = 0; i &lt; supplementaryOfferings.length; i++){
                vItem = supplementaryOfferings[i];
                vOfferingItem = vItem.OfferingKey;
                if(typeof(vOfferingItem) != 'undefined'){
                    if(isValidOffering(validOfferings, vOfferingItem.OfferingID) || validOfferings == ''){
                        vOfferings.push(vItem);
                    }
                }
            }
        } else {
            vOfferingItem = supplementaryOfferings.OfferingKey;
            if(typeof(vOfferingItem) != 'undefined'){
                if(isValidOffering(validOfferings, vOfferingItem.OfferingID) || validOfferings == ''){
                    vOfferings.push(supplementaryOfferings);
                }
            }
        }
    }
    return vOfferings;
}


function getWalletByType(strWalletName, walletJson){
    var walletObj;
    var freeUnits;
    var vItem;
    if(typeof(walletJson.QueryFreeUnitResultMsg) != 'undefined'){
        freeUnits = walletJson.QueryFreeUnitResultMsg.QueryFreeUnitResult.FreeUnitItem;
    }
    if(typeof(freeUnits) != 'undefined'){
        if(freeUnits instanceof Array){
            for(var i = 0; i &lt; freeUnits.length; i++){
                vItem = freeUnits[i];
                if(vItem.FreeUnitType == strWalletName){
                    walletObj = vItem;
                    break;
                }
            }
        } else {
            if(freeUnits.FreeUnitType == strWalletName){
                walletObj = freeUnits;
            }
        }
    }
    return walletObj;
}
function isValidOffering(validOfferings, offering){
    var flag = false;
    var tmpArray = validOfferings.split(',');
    for(var i = 0; i &lt; tmpArray.length; i++){
        if(tmpArray[i] == offering){
            flag = true;
            break;
        }
    }
    return flag;
}
function trimExhaustedInstances(instances){
    var tmpInstances = new Array();
    var flag = false;
    if(instances instanceof Array){
        for(var i = 0; i &lt; instances.length; i++){
            if(typeof(instances[i].CurrentAmount) != 'undefined'){
                flag = true;
                if(new Number(instances[i].CurrentAmount) > 0){
                    tmpInstances.push(instances[i]);
                }
            }
        }
    } else {
        if(typeof(instances.CurrentAmount) != 'undefined'){
            flag = true;
            if(new Number(instances.CurrentAmount) > 0){
                tmpInstances.push(instances);
            }
        }
    }
    tmpInstances = flag ? tmpInstances : instances;
    return tmpInstances;
}


function trimExhaustedInstancesPospaid(instances){
    var tmpInstances = new Array();
    var flag = false;
    if(instances instanceof Array){
        for(var i = 0; i &lt; instances.length; i++){
            if(typeof(instances[i].CurrentAmount) != 'undefined'){
                flag = true;
                if(new Number(instances[i].CurrentAmount) >= 0){///Se cambio a >= 0 la instancia de pospago
                    tmpInstances.push(instances[i]);
                }
            }
        }
    } else {
        if(typeof(instances.CurrentAmount) != 'undefined'){
            flag = true;
            if(new Number(instances.CurrentAmount) >= 0){///Se cambio a >= 0 la instancia de pospago
                tmpInstances.push(instances);
            }
        }
    }
    tmpInstances = flag ? tmpInstances : instances;
    return tmpInstances;
}


function getSortedItems(itemArray){
    var sortedInstances = new Array();
    var tmpInstances = trimExhaustedInstances(itemArray);
    if(tmpInstances instanceof Array){
        if(tmpInstances.length > 0){
            sortedInstances = quickSort(tmpInstances, 0, (tmpInstances.length - 1));
        }
    } else{
        sortedInstances.push(tmpInstances);
    }
    return sortedInstances;
}

function getSortedItemsPospaid(itemArray){
    var sortedInstances = new Array();
    var tmpInstances = trimExhaustedInstancesPospaid(itemArray);
    if(tmpInstances instanceof Array){
        if(tmpInstances.length > 0){
            sortedInstances = quickSort(tmpInstances, 0, (tmpInstances.length - 1));
        }
    } else{
        sortedInstances.push(tmpInstances);
    }
    return sortedInstances;
}


function swap(items, firstIdx, secondIdx){
    var tmp = items[firstIdx];
    items[firstIdx] = items[secondIdx];
    items[secondIdx] = tmp;
    return items;
}


function partition(items, pivot, left, right){
    var partitionIdx = left;
    var pivotValue = new Number(pivot.EffectiveTime);
    var itemI = 0;
    for(var i = left; i &lt; right; i++){
        itemI = new Number(items[i].EffectiveTime);
        if(itemI &lt; pivotValue){
            swap(items, i, partitionIdx);
            partitionIdx++;
        }
    }
    swap(items, right, partitionIdx);
    return partitionIdx;
}


function quickSort(items, left, right){
    var len = items.length;
    var pivot;
    var partitionIdx;
    if(len > 1){
        if(left &lt; right){
            pivot = items[right];
            partitionIdx = partition(items, pivot, left, right);
            //sort left and right
           quickSort(items, left, partitionIdx - 1);
           quickSort(items, partitionIdx + 1, right);
        }
    }
    return items;
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:serviceTask id="ServiceTask_4" name="SubscriberInfoByIdentityTask" implementation="##WebService">
      <bpmn2:incoming>SequenceFlow_16</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_10</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_4">
        <bpmn2:dataInput id="DataInput_8" name="SUBPRIMARY_IDENTITY"/>
        <bpmn2:dataInput id="DataInput_9" name="SubscriberInfoByIdentityTask__failOverPolicy"/>
        <bpmn2:dataOutput id="DataOutput_14" name="PRIMARY_OFFERINGID"/>
        <bpmn2:dataOutput id="DataOutput_15" name="PAYMENT_MODE"/>
        <bpmn2:dataOutput id="DataOutput_16" name="SUB_STATUS"/>
        <bpmn2:dataOutput id="DataOutput_17" name="PRIMARY_OFFERING_STATUS"/>
        <bpmn2:dataOutput id="DataOutput_18" name="JSON_RESPONSE"/>
        <bpmn2:inputSet id="InputSet_6" name="Input Set 10">
          <bpmn2:dataInputRefs>DataInput_8</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_9</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_6" name="Output Set 13">
          <bpmn2:dataOutputRefs>DataOutput_14</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_15</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_16</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_17</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_18</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_8">
        <bpmn2:targetRef>DataInput_8</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_21">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_41">subscriberId</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_42">DataInput_15</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_9">
        <bpmn2:targetRef>DataInput_9</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_4">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_8">false</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_2">DataInput_9</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_14">
        <bpmn2:sourceRef>DataOutput_14</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_22">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_43">DataOutput_4</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_44">vPrimaryOffering</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_15">
        <bpmn2:sourceRef>DataOutput_15</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_23">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_45">DataOutput_5</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_46">vPaymentMode</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_16">
        <bpmn2:sourceRef>DataOutput_16</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_24">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_47">DataOutput_7</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_48">vSubStatus</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_17">
        <bpmn2:sourceRef>DataOutput_17</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_25">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_49">DataOutput_36</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_50">vPrimaryOfferingStatus</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_18">
        <bpmn2:sourceRef>DataOutput_18</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_26">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_51">DataOutput_4</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_52">vStrOfferingInfo</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
    </bpmn2:serviceTask>
    <bpmn2:scriptTask id="ScriptTask_4" name="PccFunctions">
      <bpmn2:incoming>SequenceFlow_8</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_9</bpmn2:outgoing>
      <bpmn2:script>function processJson(strJsonInfo){
    var vSubscribedServices;
    var vSubscriberQuotas;
    var vSubscriber;
    var vJsonObj;
    var vDataObj = new Object();
    var vTmpObj = new Object();
    if(typeof strJsonInfo != 'undefined'){
        vJsonObj = JSON.parse(strJsonInfo);
        if(vJsonObj.getSubscriberAllInfResponse.result.resultCode == 0){
            vSubscriber = vJsonObj.getSubscriberAllInfResponse.result.subscriber;
            if(typeof vJsonObj.getSubscriberAllInfResponse.result.subscribedService != 'undefined'){
                vSubscribedServices = vJsonObj.getSubscriberAllInfResponse.result.subscribedService;
                vSubscriberQuotas = vJsonObj.getSubscriberAllInfResponse.result.subscriberQuota;
                if(vSubscribedServices instanceof Array){
                  for(var i = 0; i &lt; vSubscribedServices.length; i++){
                    vDataObj = setDataProperties(joinInfo(vSubscribedServices[i], vSubscriberQuotas), vDataObj);
                  }
                } else {
                  vDataObj = setDataProperties(joinInfo(vSubscribedServices, vSubscriberQuotas), vDataObj);
                }
            }
            vDataObj.User = joinInfo(undefined, undefined, vSubscriber);
        }
    }
    return vDataObj;
}

function getAttribute(serviceItems, attribute){
    var attributeItem = {key: 'NA', value: 'NA'};
    if(typeof serviceItems != 'undefined'){
        for(var i = 0; i &lt; serviceItems.attribute.length; i++){
            if(serviceItems.attribute[i].key == attribute){
                attributeItem = serviceItems.attribute[i];
                break;
            }
        }
    }
    return attributeItem;
}
function getQuota(quotaItems, serviceName){
    var quotaItem = new Array();
    if(typeof(quotaItems) != 'undefined'){
        if(quotaItems instanceof Array){
            for(var i = 0; i &lt; quotaItems.length; i++){
                if(getAttribute(quotaItems[i], 'SRVNAME').value == serviceName){
                    quotaItem.push(quotaItems[i]);
                }
            }
        } else {
            if(getAttribute(quotaItems, 'SRVNAME').value == serviceName){
                quotaItem.push(quotaItems);
            }
        }
    }
    return quotaItem;
}
function getUniqueQuota(quotaItems){
    var quotaItem;
    if(typeof(quotaItems) != 'undefined'){
        if(quotaItems instanceof Array){
            for(var i = 0; i &lt; quotaItems.length; i++){
                if(quotaBL.toUpperCase().indexOf(getAttribute(quotaItems[i], 'QTANAME').value.toUpperCase()) &lt; 0){
                    quotaItem = quotaItems[i];
                    break;
                }
            }
        } else {
            if(quotaBL.toUpperCase().indexOf(getAttribute(quotaItems, 'QTANAME').value.toUpperCase()) &lt; 0){
                quotaItem = quotaItems;
            }
        }
    }
    return quotaItem;
}
function joinInfo(serviceItem, quotaItem, subscriberItem){
    var tmpObj = new Object();
    var itemTmp;
    var quotaArray = new Array();
    var tmpQuotaArray = new Array();
    var quotaObj;
    var tmpQuota = new Object();
    tmpObj.ServiceName = getAttribute(serviceItem, 'SRVNAME').value;
    tmpObj.ProductName = getAttribute(serviceItem, 'SRVPRODUCTNAME').value;
    quotaArray = getQuota(quotaItem, tmpObj.ServiceName);
    itemTmp = getAttribute(serviceItem, 'SRVPRODUCTTYPE');
    tmpObj.ServiceType = tmpObj.ServiceName == 'Default_Service_Local' ? 'DEF' : itemTmp.value;
    itemTmp = getAttribute(serviceItem, 'SRVPRODUCTTYPEID');
    tmpObj.ServiceTypeId = itemTmp.value;
    tmpObj.ServiceExpired = getAttribute(serviceItem, 'SRVISEXPIRED').value;
    tmpObj.ServiceStartDate = getAttribute(serviceItem, 'SRVSTARTDATETIME').value;
    tmpObj.ServiceEndDate = getAttribute(serviceItem, 'SRVENDDATETIME').value;
    if(!plMultiQuota){
        if(quotaArray.length > 0){
            quotaObj = getUniqueQuota(quotaArray);
        }
        tmpObj.QuotaName = getAttribute(quotaObj, 'QTANAME').value;
        tmpObj.QuotaValue = getAttribute(quotaObj, 'QTAVALUE').value;
        tmpObj.QuotaBalance = getAttribute(quotaObj, 'QTABALANCE').value;
        tmpObj.QuotaConsumption = getAttribute(quotaObj, 'QTACONSUMPTION').value;
        tmpObj.QuotaValueMb = getAttribute(quotaObj, 'QTAVALUE_MB').value;
        tmpObj.QuotaBalanceMb = getAttribute(quotaObj, 'QTABALANCE_MB').value;
        tmpObj.QuotaConsumptionMb = getAttribute(quotaObj, 'QTACONSUMPTION_MB').value;
        tmpObj.QuotaPercentage = getAttribute(quotaObj, 'QTAPERCENTAGE').value;
        tmpObj.QuotaStatus = getAttribute(quotaObj, 'QTASTATUS').value;
        tmpObj.SubscriberBillCycle = getAttribute(subscriberItem, 'USRBILLCYCLEDATE').value;
    } else {
        if(tmpObj.ServiceType == 'PL'){
            for(var i = 0; i &lt; quotaArray.length; i++){
                tmpQuota.QuotaName = getAttribute(quotaArray[i], 'QTANAME').value;
                tmpQuota.QuotaValue = getAttribute(quotaArray[i], 'QTAVALUE').value;
                tmpQuota.QuotaBalance = getAttribute(quotaArray[i], 'QTABALANCE').value;
                tmpQuota.QuotaConsumption = getAttribute(quotaArray[i], 'QTACONSUMPTION').value;
                tmpQuota.QuotaValueMb = getAttribute(quotaArray[i], 'QTAVALUE_MB').value;
                tmpQuota.QuotaBalanceMb = getAttribute(quotaArray[i], 'QTABALANCE_MB').value;
                tmpQuota.QuotaConsumptionMb = getAttribute(quotaArray[i], 'QTACONSUMPTION_MB').value;
                tmpQuota.QuotaPercentage = getAttribute(quotaArray[i], 'QTAPERCENTAGE').value;
                tmpQuota.QuotaStatus = getAttribute(quotaArray[i], 'QTASTATUS').value;
                tmpQuotaArray.push(tmpQuota);
                tmpQuota = new Object();
            }
            tmpObj.Quotas = tmpQuotaArray;
        } else {
            if(quotaArray.length > 0){
                quotaObj = getUniqueQuota(quotaArray);
            }
            tmpObj.QuotaName = getAttribute(quotaObj, 'QTANAME').value;
            tmpObj.QuotaValue = getAttribute(quotaObj, 'QTAVALUE').value;
            tmpObj.QuotaBalance = getAttribute(quotaObj, 'QTABALANCE').value;
            tmpObj.QuotaConsumption = getAttribute(quotaObj, 'QTACONSUMPTION').value;
            tmpObj.QuotaValueMb = getAttribute(quotaObj, 'QTAVALUE_MB').value;
            tmpObj.QuotaBalanceMb = getAttribute(quotaObj, 'QTABALANCE_MB').value;
            tmpObj.QuotaConsumptionMb = getAttribute(quotaObj, 'QTACONSUMPTION_MB').value;
            tmpObj.QuotaPercentage = getAttribute(quotaObj, 'QTAPERCENTAGE').value;
            tmpObj.QuotaStatus = getAttribute(quotaObj, 'QTASTATUS').value;
            tmpObj.SubscriberBillCycle = getAttribute(subscriberItem, 'USRBILLCYCLEDATE').value;
        }
    }
    return tmpObj;
}
function setDataProperties(objItem, dataItem){
    switch(objItem.ServiceType){
        case 'PAQ':
            dataItem.Packages = objItem;
            break;
        case 'SUS':
            dataItem.Subscriptions = objItem;
            break;
        case 'PL':
            dataItem.Plans = objItem;
            break;
        case 'APP':
            if(typeof dataItem.Applications == 'undefined'){
                dataItem.Applications = new Array();
            }
            dataItem.Applications.push(objItem);
            break;
        case 'ADD':
            if(typeof dataItem.Addons == 'undefined'){
                dataItem.Addons = new Array();
            }
            dataItem.Addons.push(objItem);
            break;
        case 'DEF':
            dataItem.DefaultService = objItem;
            break;
        case 'SUB':
            dataItem.User = objItem;
            break;
        default:
            if(typeof dataItem.Unbound == 'undefined'){
                dataItem.Unbound = new Array();
            }
            dataItem.Unbound.push(objItem);
    }
    return dataItem;
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:serviceTask id="ServiceTask_8" name="MasterStatusGetSubscriberProfileTask" implementation="##WebService">
      <bpmn2:incoming>SequenceFlow_26</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_27</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_8">
        <bpmn2:dataInput id="DataInput_17" name="SUBSCRIBER"/>
        <bpmn2:dataInput id="DataInput_18" name="PROFILE"/>
        <bpmn2:dataInput id="DataInput_2" name="MasterStatusGetSubscriberProfileTask__failOverPolicy"/>
        <bpmn2:dataOutput id="DataOutput_82" name="ESTADO"/>
        <bpmn2:dataOutput id="DataOutput_12" name="OFFERING_ID"/>
        <bpmn2:dataOutput id="DataOutput_13" name="PURCHASESEQ"/>
        <bpmn2:inputSet id="InputSet_12" name="Input Set 5">
          <bpmn2:dataInputRefs>DataInput_18</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_17</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_2</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_12" name="Output Set 10">
          <bpmn2:dataOutputRefs>DataOutput_82</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_12</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_13</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_17">
        <bpmn2:targetRef>DataInput_17</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_98">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_195">subscriberId</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_196">DataInput_4</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_18">
        <bpmn2:targetRef>DataInput_18</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_99">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_197">actProfileId</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_198">DataInput_10</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_2">
        <bpmn2:targetRef>DataInput_2</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_3">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_9">false</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_7">DataInput_2</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_82">
        <bpmn2:sourceRef>DataOutput_82</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_100">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_199">DataOutput_7</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_200">susActive</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_12">
        <bpmn2:sourceRef>DataOutput_12</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_19">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_53">DataOutput_12</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_55">vSusActiveOffer</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_13">
        <bpmn2:sourceRef>DataOutput_13</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_20">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_56">DataOutput_13</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_58">vSusActivePurchaseSeq</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
    </bpmn2:serviceTask>
    <bpmn2:serviceTask id="ServiceTask_10" name="QueryFreeUnitTask" implementation="##WebService">
      <bpmn2:incoming>SequenceFlow_10</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_11</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_10">
        <bpmn2:dataInput id="DataInput_20" name="SUBPRIMARY_IDENTITY"/>
        <bpmn2:dataInput id="DataInput_11" name="QueryFreeUnitTask__failOverPolicy"/>
        <bpmn2:dataOutput id="DataOutput_88" name="JSON_RESPONSE"/>
        <bpmn2:inputSet id="InputSet_15" name="Input Set 5">
          <bpmn2:dataInputRefs>DataInput_20</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_11</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_15" name="Output Set 10">
          <bpmn2:dataOutputRefs>DataOutput_88</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_20">
        <bpmn2:targetRef>DataInput_20</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_107">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_213">subscriberId</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_214">DataInput_4</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_11">
        <bpmn2:targetRef>DataInput_11</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_6">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_12">false</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_10">DataInput_11</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_88">
        <bpmn2:sourceRef>DataOutput_88</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_108">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_215">DataOutput_17</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_216">vFreeUnitWallets</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
    </bpmn2:serviceTask>
    <bpmn2:scriptTask id="ScriptTask_8" name="initValues">
      <bpmn2:incoming>SequenceFlow_6</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_7</bpmn2:outgoing>
      <bpmn2:script>var STR_PAD_LEFT = 1;
var STR_PAD_RIGHT = 2;
var STR_PAD_BOTH = 3;
var BPMN_RESPONSE_CODE = '100';
var BPMN_RESPONSE_MESSAGE = 'Error durante el proceso.';
var vSysDate = new Date();
var strPackBalance = 'C_Internet_Pack';
var strPlanBalance = 'C_Data_Include';
var strSusBalance = 'C_Internet_Suscripcion';
var strAddonBalance = 'C_Data_Add';
var forCounter = 0;
var forPlanCounter=0;
var doLoop = false;
var doPlanLoop=false;
var vAddonProfile = '110';
var plMultiQuota = false;
var multiQuotasLst = 'NXS';
var quotaBL = 'TEST_FUP_APP_FACEBOOK Quota';
var vSkipBundle = false;
var vSkipChannels = '30';
var vUnifyAppsChannels = '30';
var vUnifyApps = false;
var vChannelPC = '30';

if(typeof(CHANNELS) != 'undefined'){
    vSkipChannels = CHANNELS;
}
if(typeof(CHANNEL_PC) != 'undefined'){
    vChannelPC = CHANNEL_PC;
}
if(typeof(CHANNELS_APP) != 'undefined'){
    vUnifyAppsChannels = CHANNELS_APP;
}
if(typeof(QUOTA_BL) != 'undefined'){
    quotaBL = QUOTA_BL;
}
if(typeof(MULTI_LST) != 'undefined'){
    multiQuotasLst = MULTI_LST;
}
if(typeof(ORIGEN) != 'undefined'){
    plMultiQuota = multiQuotasLst.toUpperCase().indexOf(ORIGEN.toUpperCase()) >= 0;
}
vSkipBundle = checkChannels(vSkipChannels);
vUnifyApps = checkChannels(vUnifyAppsChannels);

function checkChannels(channelLst){
    var chnnlArray = channelLst.split(',');
    var flag = false;
    for(var i = 0; i &lt; chnnlArray.length; i++){
        if(chnnlArray[i] == channelId){
            flag = true;
            break;
        }
    }
    return flag;
}

//Funcion a la cual se le manda un valor y le hace lpad o rpad con el caracter indicado y la longitud indicada
function padStr(str, len, pad, dir) {
    if (typeof(len) == 'undefined') { var len = 0; };
    if (typeof(pad) == 'undefined') { var pad = ' '; };
    if (typeof(dir) == 'undefined') { var dir = STR_PAD_RIGHT; };
    if (len + 1 >= str.length) {
        switch (dir){
            case STR_PAD_LEFT:
                str = Array(len + 1 - str.length).join(pad) + str;
            break;
            case STR_PAD_BOTH:
                var right = Math.ceil((padlen = len - str.length) / 2);
                var left = padlen - right;
                str = Array(left+1).join(pad) + str + Array(right+1).join(pad);
            break;
            default:
                str = str + Array(len + 1 - str.length).join(pad);
            break;
        } // switch
    }
    return str;
}
//Convierte un valor texto a al formato yyyyMMddhhmiss
function parseDateToStringCBS(date){
    var day = padStr(String(date.getDate()), 2, '0', STR_PAD_LEFT);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    month = padStr(String(month), 2, '0', STR_PAD_LEFT);
    var hours = padStr(String(date.getHours()), 2, '0', STR_PAD_LEFT);
    var minutes = padStr(String(date.getMinutes()), 2, '0', STR_PAD_LEFT);
    var seconds = padStr(String(date.getSeconds()), 2, '0', STR_PAD_LEFT);
    var format = year + '' + month + '' + day + '' + hours + '' + minutes + '' + seconds;
    return format;
}
//Convierte un Time a un string de Date en formato yyyy-MM-ddThh:mm:ss.000-06:00
function parseTimeToDate(date, timeZone) {
    var strDate = parseDateToString(date);
    strDate = timeZone ? strDate.replace(' ','T') + '.000-06:00' : strDate.replace(' ','T');    
    return strDate;
}
//Transforma un string con formato de fecha a un objeto Date
function parseStringToDate (strDate) {
    strDate = strDate.replace(/\D/g,' ');
    var dateArray = strDate.split(' ');
    var year = dateArray[0];
    var month = dateArray[1] - 1;
    var day = dateArray[2];
    var hours = dateArray[3];
    var minutes = dateArray[4];
    var seconds = dateArray[5];
    return new Date(year,month,day,hours,minutes,seconds);
}

//Convierte '22/02/2018 23:59:59' 

function parseStringToDate_2 (strDate) {
    strDate = strDate.replace(/\D/g,' ');
    var dateArray = strDate.split(' ');
     var day = dateArray[0];
  var month = dateArray[1]-1;
  var year = dateArray[2];  
    
    var hours = dateArray[3];
    var minutes = dateArray[4];
    var seconds = dateArray[5];
    return new Date(year,month,day,hours,minutes,seconds);
}

//Convierte un valor texto a al formato yyyy-MM-dd hh:mm:ss
function parseDateToString(date){
    var day = padStr(String(date.getDate()), 2, '0', STR_PAD_LEFT);
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    month = padStr(String(month), 2, '0', STR_PAD_LEFT);
    var hours = padStr(String(date.getHours()), 2, '0', STR_PAD_LEFT);
    var minutes = padStr(String(date.getMinutes()), 2, '0', STR_PAD_LEFT);
    var seconds = padStr(String(date.getSeconds()), 2, '0', STR_PAD_LEFT);
    var format = year + '-' + month + '-' + day + ' ' + hours + ':' + minutes + ':' + seconds;
    return format;
}
function getCbsDate(cbsDate){
    var vYear = cbsDate.substring(0, 4);
    var vMonth = new Number(cbsDate.substring(4, 6)) - 1;
    var vDay = cbsDate.substring(6, 8);
    var vHours = cbsDate.substring(8, 10);
    var vMinutes = cbsDate.substring(10, 12);
    var vSeconds = cbsDate.substring(12, 14);
    return new Date(vYear,vMonth,vDay,vHours,vMinutes,vSeconds);
}


var tSaltoL = '\n';

var tLinea = tSaltoL + '************************************************************************' + tSaltoL ;</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_6" sourceRef="StartEvent_1" targetRef="ScriptTask_8"/>
    <bpmn2:sequenceFlow id="SequenceFlow_7" sourceRef="ScriptTask_8" targetRef="ScriptTask_2"/>
    <bpmn2:sequenceFlow id="SequenceFlow_8" sourceRef="ScriptTask_2" targetRef="ScriptTask_4"/>
    <bpmn2:sequenceFlow id="SequenceFlow_9" sourceRef="ScriptTask_4" targetRef="ServiceTask_3"/>
    <bpmn2:sequenceFlow id="SequenceFlow_10" sourceRef="ServiceTask_4" targetRef="ServiceTask_10"/>
    <bpmn2:sequenceFlow id="SequenceFlow_11" sourceRef="ServiceTask_10" targetRef="ServiceTask_2"/>
    <bpmn2:scriptTask id="ScriptTask_9" name="setObjects">
      <bpmn2:incoming>SequenceFlow_12</bpmn2:incoming>
      <bpmn2:incoming>SequenceFlow_31</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_13</bpmn2:outgoing>
      <bpmn2:script>var navObject = setNavObjects();
var enrichedOfferings = {
    appOfferings: [],
    susOfferings: [],
    cmbOfferings: [],
    packOfferings: [],
    undefOfferings: [],
    planOfferings: []
    //,addonsOfferings: [],addonsT2Offerings: []
};
var bPckOffers = new Array();
var supplementaryOffers = new Array();
var primaryOffers = new Array();
var subscriptionItems = new Array();
var packageWallet;
var planWallet;
var addonWallet;
var tmpOffers;
var tmpOffers_plan;
var tmpOffers_addons;
var activePackSeq = '0';
var activePlanSeq = '0';
var activeAddSeq = '0';
var activeAppsSeq = new Array();
var packInstances;
var planInstances;
var addInstances;
var tmpInstances;
var tmpInstances_plan;
var tmpInstances_add;
var tmpInstances_addT2;
var planBillCycle = '-';
var vACLExist=false;

if(typeof vExists!= 'undefined'){
    if(vExists=='true'){
        vACLExist=true;
    }
}

if (navObject.offeringJson.filled) {
    supplementaryOffers = getSupplementaryOfferings(&quot;&quot;, navObject.offeringJson.obj);
    primaryOffers = getPrimaryOfferings(&quot;&quot;, navObject.offeringJson.obj);
    planBillCycle = getBillCycleCBS(navObject.offeringJson.obj);
}

if (navObject.walletJson.filled) {
    packageWallet = getWalletObj(strPackBalance, navObject.walletJson);
    planWallet = getWalletObj(strPlanBalance, navObject.walletJson);
    addonWallet = getWalletObj(strAddonBalance, navObject.walletJson);
}

if (typeof (packageWallet) != 'undefined') {
    tmpOffers = getSortedItems(packageWallet.FreeUnitItemDetail);
    activePackSeq = tmpOffers.length > 0 ? tmpOffers[0].FreeUnitOrigin.OfferingKey.PurchaseSeq : '0';
}

if (typeof (planWallet) != 'undefined') {
    //tmpOffers_plan = getSortedItems(planWallet.FreeUnitItemDetail);
    tmpOffers_plan = getSortedItemsPospaid(planWallet.FreeUnitItemDetail);
    activePlanSeq = tmpOffers_plan.length > 0 ? tmpOffers_plan[0].FreeUnitOrigin.OfferingKey.PurchaseSeq : '0';
}

if (typeof (addonWallet) != 'undefined') {
    tmpOffers_addons = getSortedItems(addonWallet.FreeUnitItemDetail);
    activeAddSeq = tmpOffers_addons.length > 0 ? tmpOffers_addons[0].FreeUnitOrigin.OfferingKey.PurchaseSeq : '0';
}

function setNavObjects() {
    var navObject = {walletJson: {filled: false},offeringJson: {filled: false},pccJson: {filled: false}};

    if (typeof (vFreeUnitWallets) != 'undefined') {
        navObject.walletJson.obj = getJSON(vFreeUnitWallets);
        navObject.walletJson.filled = true;
    }

    if (typeof (vStrOfferingInfo) != 'undefined') {
        navObject.offeringJson.obj = getJSON(vStrOfferingInfo);
        navObject.offeringJson.filled = true;
    }

    if (typeof (vStrPcc) != 'undefined') {
        navObject.pccJson.obj = processJson(vStrPcc);
        navObject.pccJson.filled = true;
    }

    return navObject;
}

function getWalletObj(walletName, walletObj) {
    var tmpItm;
    if (walletObj.filled) {
        tmpItm = getWalletByType(walletName, walletObj.obj);
    }
    return tmpItm;
}

function setEnrichment(pEnriched, enrichedItem) {
    var enrichedObj = pEnriched;
    switch (enrichedItem.offerType) {
        case 'APP':
            enrichedObj.appOfferings.push(enrichedItem);
            break;
        case 'SUS':
        case 'SUSAPP':
            enrichedObj.susOfferings.push(enrichedItem);
            break;
        case 'PAQ':
            enrichedObj.packOfferings.push(enrichedItem);
            break;
        case 'CMB':
            enrichedObj.cmbOfferings.push(enrichedItem);
            break;
        case 'PLAN':
            enrichedObj.planOfferings.push(enrichedItem);
            break;
            // case 'ADD':
            //     enrichedObj.addonsOfferings.push(enrichedItem);
            //     break;
            // case 'ADDRET':
            //     enrichedObj.addonsT2Offerings.push(enrichedItem);
            //     break;
        default:
            enrichedObj.undefOfferings.push(enrichedItem);
            break;
    }
    return enrichedObj;
}

function splitInstancesPlan(itemArray, activeId) {
    var activeInstance = new Object();
    var queuedInstances = new Array();
    var splitObj = new Array();
    var strtIdx = 0;
    if (itemArray instanceof Array) {
        if (itemArray.length > 0) {
            for (var i = 0; i &lt; itemArray.length; i++) {
                 if(java.lang.Thread.interrupted()){
				break;
			}
                if (activeId == itemArray[i].FreeUnitOrigin.OfferingKey.PurchaseSeq) {
                    activeInstance = itemArray[i];
                    //strtIdx = 1;
                }
                // if (itemArray.length >= 1) {
                //     for (var i = strtIdx; i &lt; itemArray.length; i++) {
                //         queuedInstances.push(itemArray[i]);
                //     }
                // }
            }
        }
    } else {
        if (activeId == itemArray.FreeUnitOrigin.OfferingKey.PurchaseSeq) {
            activeInstance = itemArray;
        } else {
            queuedInstances.push(itemArray);
        }
    }
    splitObj.active = activeInstance;
    //splitObj.queued = queuedInstances;
    return splitObj;
}

function splitInstancesAddons(itemArray, activeOff) {
    var addRetInstance = new Object();
    var addInstance = new Array();
    var splitObj = new Array();
    if (itemArray instanceof Array) {
        if (itemArray.length > 0) {
            for (var i = 0; i &lt; itemArray.length; i++) {
                 if(java.lang.Thread.interrupted()){
				break;
			}
                if (activeOff == itemArray[i].FreeUnitOrigin.OfferingKey.OfferingID) {
                    addRetInstance = itemArray[i];
                } else {
                    addInstance.push(itemArray[i]);
                }
            }
        }
    } else {
        if (activeOff == itemArray.FreeUnitOrigin.OfferingKey.OfferingID) {
            addRetInstance = itemArray;
        } else {
            addInstance.push(itemArray);
        }
    }
    splitObj.addonsT2 = addRetInstance;
    splitObj.addons = addInstance;
    return splitObj;
}

function splitInstances(itemArray, activeId) {
    var activeInstance = new Object();
    var queuedInstances = new Array();
    var splitObj = new Array();
    var strtIdx = 0;
    if (itemArray instanceof Array) {
        if (itemArray.length > 0) {
            if (activeId == itemArray[0].FreeUnitOrigin.OfferingKey.PurchaseSeq) {
                activeInstance = itemArray[0];
                strtIdx = 1;
            }
            if (itemArray.length >= 1) {
                for (var i = strtIdx; i &lt; itemArray.length; i++) {
                    if(java.lang.Thread.interrupted()){
				break;
			}
                    queuedInstances.push(itemArray[i]);
                }
            }
        }
    } else {
        if (activeId == itemArray.FreeUnitOrigin.OfferingKey.PurchaseSeq) {
            activeInstance = itemArray;
        } else {
            queuedInstances.push(itemArray);
        }
    }
    splitObj.active = activeInstance;
    splitObj.queued = queuedInstances;
    return splitObj;
}

function snatchInstances(itemArray, offeringLst, include, snatchIns, snatchSeq) {
    var snatchedInstances = new Array();
    var snatchId = '';
    if (itemArray instanceof Array) {
        for (var i = 0; i &lt; itemArray.length; i++) {
             if(java.lang.Thread.interrupted()){
				break;
			}
            if (snatchSeq) {
                if (snatchIns) {
                    snatchId = itemArray[i].FreeUnitOrigin.OfferingKey.PurchaseSeq;
                } else {
                    snatchId = itemArray[i].OfferingKey.PurchaseSeq;
                }
            } else {
                if (snatchIns) {
                    snatchId = itemArray[i].FreeUnitOrigin.OfferingKey.OfferingID;
                } else {
                    snatchId = itemArray[i].OfferingKey.OfferingID;
                }
            }
            if (include) {
                if (existsOffer(offeringLst, snatchId)) {
                    snatchedInstances.push(itemArray[i]);
                }
            } else {
                if (!existsOffer(offeringLst, snatchId)) {
                    snatchedInstances.push(itemArray[i]);
                }
            }
        }
    } else {
        if (snatchSeq) {
            if (snatchIns) {
                snatchId = itemArray.FreeUnitOrigin.OfferingKey.PurchaseSeq;
            } else {
                snatchId = itemArray.OfferingKey.PurchaseSeq;
            }
        } else {
            if (snatchIns) {
                snatchId = itemArray.FreeUnitOrigin.OfferingKey.OfferingID;
            } else {
                snatchId = itemArray.OfferingKey.OfferingID;
            }
        }
        if (include) {
            if (existsOffer(offeringLst, snatchId)) {
                snatchedInstances.push(itemArray);
            }
        } else {
            if (!existsOffer(offeringLst, snatchId)) {
                snatchedInstances.push(itemArray);
            }
        }
    }
    return snatchedInstances;
}

function existsOffer(offerLst, offerSeq) {
    var flag = false;
    if (offerLst instanceof Array) {
        for (var i = 0; i &lt; offerLst.length; i++) {
             if(java.lang.Thread.interrupted()){
				break;
			}
            if (offerLst[i] == offerSeq) {
                flag = true;
                break;
            }
        }
    } else {
        flag = offerLst == offerSeq;
    }
    return flag;
}

function setPackageItems(instances, queue) {
    var packItem;
    var tmpItem;
    var currentAmtBts = 0;
    var initialAmtBts = 0;
    var consumptionAmtBts = 0;
    var itmClass = !queue ? 'Vigente' : 'Pendiente';
    var itmOffer = '';
    var itmProduct = '';
    var itmPurchaseSeq = '';
    var itmName = '';
    var itmType = 'Paquete';
    var itmMeasure = 'MB';
    var itmServiceStart = '';
    var itmServiceEnd = '';
    var itmQtaPrcntg = '';
    var itmQtaValue = '';
    var itmQtaConsumption = '';
    var itmQtaBalance = '';
    if (instances instanceof Array) {
        packItem = new Array();
        for (var i = 0; i &lt; instances.length; i++) {
             if(java.lang.Thread.interrupted()){
				break;
			}
            tmpItem = new Object();
            currentAmtBts = new Number(instances[i].CurrentAmount);
            initialAmtBts = new Number(instances[i].InitialAmount);
            consumptionAmtBts = initialAmtBts - currentAmtBts;
            itmOffer = instances[i].FreeUnitOrigin.OfferingKey.OfferingID;
            itmProduct = &quot;0&quot;;
            itmPurchaseSeq = instances[i].FreeUnitOrigin.OfferingKey.PurchaseSeq;
            itmName = instances[i].FreeUnitOrigin.OfferingKey.OfferingName;
            itmServiceStart = instances[i].EffectiveTime;
            itmServiceEnd = instances[i].ExpireTime;
            itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
            itmQtaValue = getUnit(initialAmtBts, 'KB');
            itmQtaConsumption = getUnit(consumptionAmtBts, 'KB');
            itmQtaBalance = getUnit(currentAmtBts, 'KB');
            tmpItem = setItem(itmOffer, itmProduct, itmPurchaseSeq, itmName, itmType, itmMeasure, itmServiceStart,
                itmServiceEnd, itmQtaPrcntg, itmQtaValue, itmQtaConsumption, itmQtaBalance, itmClass, false, false, true);
            packItem.push(tmpItem);
        }
    } else {
        packItem = new Object();
        if (typeof (instances.CurrentAmount) != 'undefined') {
            currentAmtBts = new Number(instances.CurrentAmount);
            initialAmtBts = new Number(instances.InitialAmount);
            consumptionAmtBts = initialAmtBts - currentAmtBts;
            itmOffer = instances.FreeUnitOrigin.OfferingKey.OfferingID;
            itmProduct = &quot;0&quot;;
            itmPurchaseSeq = instances.FreeUnitOrigin.OfferingKey.PurchaseSeq;
            itmName = instances.FreeUnitOrigin.OfferingKey.OfferingName;
            itmServiceStart = instances.EffectiveTime;
            itmServiceEnd = instances.ExpireTime;
            itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
            itmQtaValue = getUnit(initialAmtBts, 'KB');
            itmQtaConsumption = getUnit(consumptionAmtBts, 'KB');
            itmQtaBalance = getUnit(currentAmtBts, 'KB');
            packItem = setItem(itmOffer, itmProduct, itmPurchaseSeq, itmName, itmType, itmMeasure, itmServiceStart,
                itmServiceEnd, itmQtaPrcntg, itmQtaValue, itmQtaConsumption, itmQtaBalance, itmClass, false, false, true);
        }
    }
    return packItem;
}

//Funcion Planes VAS
function setPlanItems(instances, CbsCycle, queue) {
    var planItem = new Object();
    var tmpPlanItem = new Array();
    var tmpItem = new Object();
    var currentAmtBts = 0;
    var initialAmtBts = 0;
    var consumptionAmtBts = 0;
    //var itmClass = !queue ? 'Vigente' : 'Pendiente';
    var itmClass = 'Vigente';
    var itmOffer = '';
    var itmProduct = '';
    var itmPurchaseSeq = '';
    var itmName = '';
    var itmType = 'Plan';
    var itmMeasure = 'MB';
    var itmServiceStart = '';
    var itmServiceEnd = '';
    var itmQtaPrcntg = '';
    var itmQtaValue = '';
    var itmQtaConsumption = '';
    var itmQtaBalance = '';
    var itmBillCylcle = CbsCycle;
    if (instances instanceof Array) {
       
        for (var i = 0; i &lt; instances.length; i++) {
             if(java.lang.Thread.interrupted()){
				break;
			}
            tmpItem = new Object();
            currentAmtBts = new Number(instances[i].CurrentAmount);
            initialAmtBts = new Number(instances[i].InitialAmount);
            consumptionAmtBts = initialAmtBts - currentAmtBts;
            itmOffer = instances[i].FreeUnitOrigin.OfferingKey.OfferingID;
            itmPurchaseSeq = instances[i].FreeUnitOrigin.OfferingKey.PurchaseSeq;
            //planItem.offering = itmOffer;
            //planItem.productId = &quot;0&quot;;
            //planItem.purchase_seq = instances[i].FreeUnitOrigin.OfferingKey.PurchaseSeq;
            planItem.product_name = instances[i].FreeUnitOrigin.OfferingKey.OfferingName;
            planItem.type_name = itmType;
            //itmServiceStart = instances[i].EffectiveTime;
            //itmServiceEnd = instances[i].ExpireTime;
            planItem.service_start = itmBillCylcle != &quot;-&quot; ? getCycleDate(new Number(itmBillCylcle)) : itmBillCylcle;
            planItem.service_end = '-';
            itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
            itmQtaValue = getUnit(initialAmtBts, 'KB');
            itmQtaConsumption = getUnit(consumptionAmtBts, 'KB');
            itmQtaBalance = getUnit(currentAmtBts, 'KB');
            tmpItem.measure = itmMeasure;
            tmpItem.qta_balance = itmQtaBalance;
            tmpItem.qta_consumption = itmQtaConsumption;
            tmpItem.qta_value = itmQtaValue;
            tmpItem.qta_percentage = itmQtaPrcntg;
            //tmpItem = setItemPlanCBS(itmMeasure,itmQtaPrcntg, itmQtaValue, itmQtaConsumption, itmQtaBalance, itmClass, false, false, true);
            //planItem.push(tmpItem);
            if (itmOffer == vOfferingPlanVAS &amp;&amp; itmPurchaseSeq == vPurchaseSeqVAS) {
                tmpPlanItem.push(tmpItem);
                break;
            }
            tmpItem = new Object();
        }
        planItem.quotas = tmpPlanItem;
    } else if (plMultiQuota){
        var planItem2=new Object();
        //tmpPlanItem = new Array();
        //tmpItem = new Object();
        if (typeof (instances.CurrentAmount) != 'undefined') {
            currentAmtBts = new Number(instances.CurrentAmount);
            initialAmtBts = new Number(instances.InitialAmount);
            consumptionAmtBts = initialAmtBts - currentAmtBts;
            itmOffer = instances.FreeUnitOrigin.OfferingKey.OfferingID;
            itmPurchaseSeq = instances.FreeUnitOrigin.OfferingKey.PurchaseSeq;
            //planItem.offering = instances.FreeUnitOrigin.OfferingKey.OfferingID;
            //planItem.productId = &quot;0&quot;;
            //planItem.purchase_seq = instances.FreeUnitOrigin.OfferingKey.PurchaseSeq;
            // if (itmOffer == vOfferingPlanVAS &amp;&amp; itmPurchaseSeq == vPurchaseSeqVAS) {
            planItem.product_name = instances.FreeUnitOrigin.OfferingKey.OfferingName;
            planItem.type_name = itmType;
            //itmServiceStart = instances.EffectiveTime;
            //itmServiceEnd = instances.ExpireTime;
            planItem.service_start = itmBillCylcle != &quot;-&quot; ? getCycleDate(new Number(itmBillCylcle)) : itmBillCylcle;
            planItem.service_end = '-';
            itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
            itmQtaValue = getUnit(initialAmtBts, 'KB');
            itmQtaConsumption = getUnit(consumptionAmtBts, 'KB');
            itmQtaBalance = getUnit(currentAmtBts, 'KB');
            planItem2.measure = itmMeasure;
            planItem2.qta_balance = itmQtaBalance;
            planItem2.qta_consumption = itmQtaConsumption;
            planItem2.qta_value = itmQtaValue;
            planItem2.qta_percentage = itmQtaPrcntg;
            tmpPlanItem.push(planItem2);
            //planItem = setItemPlanCBS(itmMeasure,itmQtaPrcntg, itmQtaValue, itmQtaConsumption, itmQtaBalance, itmClass, false, false, true);
            //}
        }
        planItem.quotas = tmpPlanItem;
    }
    else{
         if (typeof (instances.CurrentAmount) != 'undefined') {
            currentAmtBts = new Number(instances.CurrentAmount);
            initialAmtBts = new Number(instances.InitialAmount);
            consumptionAmtBts = initialAmtBts - currentAmtBts;
            itmOffer = instances.FreeUnitOrigin.OfferingKey.OfferingID;
            itmPurchaseSeq = instances.FreeUnitOrigin.OfferingKey.PurchaseSeq;
            //planItem.offering = instances.FreeUnitOrigin.OfferingKey.OfferingID;
            //planItem.productId = &quot;0&quot;;
            //planItem.purchase_seq = instances.FreeUnitOrigin.OfferingKey.PurchaseSeq;
            // if (itmOffer == vOfferingPlanVAS &amp;&amp; itmPurchaseSeq == vPurchaseSeqVAS) {
            planItem.product_name = instances.FreeUnitOrigin.OfferingKey.OfferingName;
            planItem.type_name = itmType;
            //itmServiceStart = instances.EffectiveTime;
            //itmServiceEnd = instances.ExpireTime;
            planItem.service_start = itmBillCylcle != &quot;-&quot; ? getCycleDate(new Number(itmBillCylcle)) : itmBillCylcle;
            planItem.service_end = '-';
            itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
            itmQtaValue = getUnit(initialAmtBts, 'KB');
            itmQtaConsumption = getUnit(consumptionAmtBts, 'KB');
            itmQtaBalance = getUnit(currentAmtBts, 'KB');
            planItem.measure = itmMeasure;
            planItem.qta_balance = itmQtaBalance;
            planItem.qta_consumption = itmQtaConsumption;
            planItem.qta_value = itmQtaValue;
            planItem.qta_percentage = itmQtaPrcntg;
         }

    }
    return planItem;
}

//Funcion Addons
function setAddonsItems(instances, CbsCycle, queue) {
    var addonItm = new Object();
    var addItem;
    var addItemT2;
    var tmpItem;
    var currentAmtBts = 0;
    var initialAmtBts = 0;
    var consumptionAmtBts = 0;
    //var itmClass = !queue ? 'Vigente' : 'Pendiente';
    var itmClass = 'Vigente';
    var itmOffer = '';
    var itmProduct = '';
    var itmPurchaseSeq = '';
    var itmName = '';
    var itmType = 'Addon';
    var itmMeasure = 'MB';
    var itmServiceStart = '';
    var itmServiceEnd = '';
    var itmQtaPrcntg = '';
    var itmQtaValue = '';
    var itmQtaConsumption = '';
    var itmQtaBalance = '';
    var itmBillCylcle = CbsCycle;
    if (instances instanceof Array) {
        addItem = new Array();
        if(instances.length>0){
        itmServiceStart = instances[instances.length - 1].EffectiveTime;
        itmServiceEnd = instances[0].ExpireTime;
        for (var i = 0; i &lt; instances.length; i++) {
             if(java.lang.Thread.interrupted()){
				break;
			}
            tmpItem = new Object();
            //currentAmtBts = new Number(instances[i].CurrentAmount);
            currentAmtBts += new Number(instances[i].CurrentAmount);
            initialAmtBts += new Number(instances[i].InitialAmount);
            consumptionAmtBts = initialAmtBts - currentAmtBts;
            itmOffer = instances[i].FreeUnitOrigin.OfferingKey.OfferingID;
            //itmProduct = &quot;0&quot;;
            //itmPurchaseSeq = instances[i].FreeUnitOrigin.OfferingKey.PurchaseSeq;
            if (typeof vAddonRetOffering != 'undefined') {
            if (itmOffer.indexOf(vAddonRetOffering) &lt; 0) {
               // if (itmOffer == vAddonRetOffering) {
                    itmName += itmName == '' ? instances[i].FreeUnitOrigin.OfferingKey.OfferingName : ',' + instances[i].FreeUnitOrigin.OfferingKey.OfferingName;
                }
            } else {
                itmName += itmName == '' ? instances[i].FreeUnitOrigin.OfferingKey.OfferingName : ',' + instances[i].FreeUnitOrigin.OfferingKey.OfferingName;
            }
        }
        itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
        itmQtaValue = getUnit(initialAmtBts, 'KB');
        itmQtaConsumption = getUnit(consumptionAmtBts, 'KB');
        itmQtaBalance = getUnit(currentAmtBts, 'KB');
        addonItm.product_name = itmName;
        addonItm.type_name = itmType;
        addonItm.measure = itmMeasure;
        addonItm.service_start = itmServiceStart;
        addonItm.service_end = itmServiceEnd;
        addonItm.qta_balance = itmQtaBalance;
        addonItm.qta_consumption = itmQtaConsumption;
        addonItm.qta_value = itmQtaValue;
        if (vChannelPC == channelId) {
            addonItm.qta_percentage = String(new Number(itmQtaPrcntg) - 100);
            if (addonItm.qta_percentage &lt; 0)
                addonItm.qta_percentage = String(new Number(addonItm.qta_percentage) * (-1));
        } else {
            addonItm.qta_percentage = itmQtaPrcntg;
        }
        }
    } else {
        itmServiceStart = instances.EffectiveTime;
        itmServiceEnd = instances.ExpireTime;
        tmpItem = new Object();
        //currentAmtBts = new Number(instances[i].CurrentAmount);
        currentAmtBts += new Number(instances.CurrentAmount);
        initialAmtBts += new Number(instances.InitialAmount);
        consumptionAmtBts = initialAmtBts - currentAmtBts;
        itmOffer = instances.FreeUnitOrigin.OfferingKey.OfferingID;
        //itmProduct = &quot;0&quot;;
        //itmPurchaseSeq = instances[i].FreeUnitOrigin.OfferingKey.PurchaseSeq;
        if (typeof vAddonRetOffering != 'undefined') {
            if (itmOffer.indexOf(vAddonRetOffering) &lt; 0) {
                //if (itmOffer == vAddonRetOffering) {
                itmName += itmName == '' ? instances.FreeUnitOrigin.OfferingKey.OfferingName : ',' + instances.FreeUnitOrigin.OfferingKey.OfferingName;
            }
        } else {
            itmName += itmName == '' ? instances.FreeUnitOrigin.OfferingKey.OfferingName : ',' + instances.FreeUnitOrigin.OfferingKey.OfferingName;
        }
        itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
        itmQtaValue = getUnit(initialAmtBts, 'KB');
        itmQtaConsumption = getUnit(consumptionAmtBts, 'KB');
        itmQtaBalance = getUnit(currentAmtBts, 'KB');
        addonItm.product_name = itmName;
        addonItm.type_name = itmType;
        addonItm.measure = itmMeasure;
        addonItm.service_start = itmServiceStart;
        addonItm.service_end = itmServiceEnd;
        addonItm.qta_balance = itmQtaBalance;
        addonItm.qta_consumption = itmQtaConsumption;
        addonItm.qta_value = itmQtaValue;
        if (vChannelPC == channelId) {
            addonItm.qta_percentage = String(new Number(itmQtaPrcntg) - 100);
            if (addonItm.qta_percentage &lt; 0)
                addonItm.qta_percentage = String(new Number(addonItm.qta_percentage) * (-1));
        } else {
            addonItm.qta_percentage = itmQtaPrcntg;
        }
    }
    return addonItm;
}

/*Addons de Retenciones*/
function setRetAddon(instances) {
    var addonItm = new Object();
    var tmpAddon = new Object();
    if (typeof vAddonRetOffering != 'undefined' &amp;&amp; typeof vAddonRetExpire != 'undefined') {
        tmpAddon = getAddRet(instances.addonsT2, vAddonRetOffering);
        if (typeof tmpAddon != 'undefined') {
            addonItm.product_name = tmpAddon.FreeUnitOrigin.OfferingKey.OfferingName;
            addonItm.type_name = 'Addon';
            addonItm.service_start = tmpAddon.EffectiveTime;
            addonItm.service_end = getRetEndDate(vAddonRetExpire);
        }
    }
    return addonItm;
}

function getRetEndDate(val) {
    //04/12/2017 23:59:13 
    var strDate = val.replace(/\D/g, ' ');
    var dateArray = strDate.split(' ');
    var day = padStr(dateArray[0], 2, '0', STR_PAD_LEFT);
    var year = dateArray[2];
    var month = padStr(dateArray[1], 2, '0', STR_PAD_LEFT);
    var hours = padStr(dateArray[3], 2, '0', STR_PAD_LEFT);
    var minutes = padStr(dateArray[4], 2, '0', STR_PAD_LEFT);
    var seconds = padStr(dateArray[5], 2, '0', STR_PAD_LEFT);
    var format = year + '' + month + '' + day + '' + hours + '' + minutes + '' + seconds;
    return format;
}

function getAddRet(addArray, addName) {
    var addItem;
   
    if (addArray instanceof Array) {
        for (var i = 0; i &lt; addArray.length; i++) {
            if (addArray[i].FreeUnitOrigin.OfferingKey.OfferingID.indexOf(vAddonRetOffering) >= 0) {
                addItem = addArray[i];
                break;
            }
        }
    } else {
        if(typeof (addArray.FreeUnitOrigin)!= 'undefined'){
        if (addArray.FreeUnitOrigin.OfferingKey.OfferingID.indexOf(vAddonRetOffering) >= 0) {
            addItem = addArray;
        }
        }
    }
    
    
    return addItem;
}
/*Fin Retenciones*/

function getCycleDate(billingDay) {
    var vNow = new Date(vSysDate.getTime());
    var addMonth = true;
    var vMonth = '0';
    var vAdd = billingDay > 1 ? 2 : 1;
    if (vNow.getDate() > billingDay) {
        vNow.setMonth(vNow.getMonth() + vAdd);
        addMonth = false;
    }
    vMonth = addMonth ? String((vNow.getMonth() + 1)) : String(vNow.getMonth());
    vNow.setDate(billingDay - 1);
    return padStr(vNow.getFullYear(), 4, '0', STR_PAD_LEFT) + '' + padStr(vMonth, 2, '0', STR_PAD_LEFT) + '' + padStr(String(vNow.getDate()), 2, '0', STR_PAD_LEFT) + '' + padStr(String(23), 2, '0', STR_PAD_LEFT) + '' + padStr(String(59), 2, '0', STR_PAD_LEFT) + '' + padStr(String(59), 2, '0', STR_PAD_LEFT);
}

function setItem(pOffering, pProduct, pPurchaseSeq, pName, pType, pMeasure, pServiceStart,
    pServiceEnd, pQtaPcntg, pQtaValue, pQtaConsumption, pQtaBalance, pClass, isApp, addActive, pActive) {
    var objItem = new Object();
    objItem.offering = pOffering;
    objItem.productId = pProduct;
    objItem.purchase_seq = pPurchaseSeq;
    objItem.product_name = pName;
    objItem.type_name = pType;
    objItem.measure = pMeasure;
    objItem.service_start = pServiceStart;
    objItem.service_end = pServiceEnd;
    if (!isApp) {
        objItem.qta_percentage = pQtaPcntg;
        objItem.qta_value = pQtaValue;
        objItem.qta_consumption = pQtaConsumption;
        objItem.qta_balance = pQtaBalance;
    } else {
        objItem.hour_percentage = pQtaPcntg;
        objItem.total_hours = pQtaValue;
        objItem.hours_consumed = pQtaConsumption;
        objItem.hours_remaining = pQtaBalance;
    }
    if (addActive) {
        objItem.active = pActive;
    }
    objItem[&quot;class&quot;] = pClass;
    return objItem;
}

function setItemSubs(pOffering, pProduct, pPurchaseSeq, pName, pType, pMeasure, pServiceStart,
    pServiceEnd, pQtaPcntg, pQtaValue, pQtaConsumption, pQtaBalance, pClass, isApp, addActive, pActive) {
    var objItem = new Object();
    objItem.offering = pOffering;
    objItem.productId = pProduct;
    objItem.purchase_seq = pPurchaseSeq;
    objItem.product_name = pName;
    objItem.type_name = pType;
    objItem.measure = pMeasure;
    objItem.service_start = pServiceStart;
    objItem.next_renewal = pServiceEnd;
    if (!isApp) {
        objItem.qta_percentage = pQtaPcntg;
        objItem.qta_value = pQtaValue;
        objItem.qta_consumption = pQtaConsumption;
        objItem.qta_balance = pQtaBalance;
    } else {
        objItem.hour_percentage = pQtaPcntg;
        objItem.total_hours = pQtaValue;
        objItem.hours_consumed = pQtaConsumption;
        objItem.hours_remaining = pQtaBalance;
    }
    if (addActive) {
        objItem.active = pActive;
    }
    objItem[&quot;class&quot;] = pClass;
    return objItem;
}

function getUnit(val, unit) {
    var btKb = 1024;
    var kbMb = 1024;
    var valMB = '0';
    switch (unit) {
        case &quot;BT&quot;:
            valMB = String(new Number(Math.ceil((val / 1024) / 1024)).toFixed(2));
            break;
        case &quot;KB&quot;:
            valMB = String(new Number(Math.ceil(val / 1024).toFixed(2)));
            break;
        default:
            valMB = String(val);
            break;
    }
    return valMB;
}

function setPackage(pInstances) {
    var packItem = new Object();
    packItem.active = setPackageItems(pInstances.active, false);
    packItem.queued = setPackageItems(pInstances.queued, true);
    return packItem;
}

function setPlanCBS(pInstances, vCycle) {
    var planItem = new Object();
    //planItem.active = setPlanItems(pInstances.active,vCycle,false);
    //planItem.queued = setPlanItems(pInstances.queued,vCycle,true);
    planItem = setPlanItems(pInstances.active, vCycle, false);
    return planItem;
}

function setAddCBS(pInstances, vCycle) {
    var addItem = new Object();
    addItem = setAddonsItems(pInstances.addons, vCycle, false);
    //addItem.queued = setAddonsItems(pInstances.queued, vCycle, true);
    return addItem;
}

function setApplications(pInstances) {
    var appItem = new Object();
    appItem.active = setAppItems(pInstances.active, false);
    appItem.queued = setAppItems(getSortedItems(pInstances.queued), true);
    return appItem;
}

function splitApps(itemArray) {
    var appArray = new Array();
    var tmpArray;
    var bustedOffers = new Array();
    var tmpId;
    for (var i = 0; i &lt; itemArray.length; i++) {
         if(java.lang.Thread.interrupted()){
				break;
			}
        tmpId = itemArray[i].OfferingKey.OfferingID;
        if (!existsOffer(bustedOffers, tmpId)) {
            bustedOffers.push(tmpId);
            LOGGER.info('tmpId:' + tmpId);
            tmpArray = getSortedItems(snatchInstances(itemArray, tmpId, true, false, false));
            LOGGER.info('tmpArray:' + tmpArray.length);
            if (tmpArray.length > 0) {
                appArray.push(tmpArray);
            }
        }
    }
    //LOGGER.info('appArray:' + JSON.stringify(appArray));
    return appArray;
}

function splitOffers(pApps, pActiveIds) {
    var appItem = new Object();
    var activeOffers = new Array();
    var queuedOffers = new Array();
    var tmpArray;
    for (var i = 0; i &lt; pApps.length; i++) {
         if(java.lang.Thread.interrupted()){
				break;
			}
        tmpArray = pApps[i];
        for (var j = 0; j &lt; tmpArray.length; j++) {
            if (existsOffer(pActiveIds, tmpArray[j].OfferingKey.PurchaseSeq)) {
                activeOffers.push(tmpArray[j]);
            } else {
                queuedOffers.push(tmpArray[j]);
            }
        }
    }
    appItem.active = activeOffers;
    appItem.queued = queuedOffers;
    return appItem;
}

function setAppItems(instances, queue) {
    var packItem;
    var tmpItem;
    var currentAmtBts = 0;
    var initialAmtBts = 0;
    var consumptionAmtBts = 0;
    var itmClass = !queue ? 'Vigente' : 'Pendiente';
    var itmOffer = '';
    var itmProduct = '';
    var itmPurchaseSeq = '';
    var itmName = '';
    var itmType = 'Aplicacion';
    var itmMeasure = 'Hrs';
    var itmServiceStart = '';
    var itmServiceEnd = '';
    var itmQtaPrcntg = '';
    var itmQtaValue = '';
    var itmQtaConsumption = '';
    var itmQtaBalance = '';
    if (instances instanceof Array) {
        packItem = new Array();
        for (var i = 0; i &lt; instances.length; i++) {
             if(java.lang.Thread.interrupted()){
				break;
			}
            tmpItem = new Object();
            itmServiceStart = instances[i].EffectiveTime;
            itmServiceEnd = instances[i].ExpirationTime;
            currentAmtBts = getHoursDiff(itmServiceStart, itmServiceEnd, true);
            initialAmtBts = getHoursDiff(itmServiceStart, itmServiceEnd, false);
            consumptionAmtBts = initialAmtBts - currentAmtBts;
            itmOffer = typeof (instances[i].OfferingKey) != 'undefined' ? instances[i].OfferingKey.OfferingID : '0';
            itmProduct = typeof (instances[i].productId) != 'undefined' ? instances[i].productId : '0';
            itmPurchaseSeq = typeof (instances[i].OfferingKey) != 'undefined' ? instances[i].OfferingKey.PurchaseSeq : '0';
            itmName = instances[i].offerName;
            itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
            itmQtaValue = getUnit(initialAmtBts, 'HR');
            itmQtaConsumption = getUnit(consumptionAmtBts, 'HR');
            itmQtaBalance = getUnit(currentAmtBts, 'HR');
            tmpItem = setItem(itmOffer, itmProduct, itmPurchaseSeq, itmName, itmType, itmMeasure, itmServiceStart,
                itmServiceEnd, itmQtaPrcntg, itmQtaValue, itmQtaConsumption, itmQtaBalance, itmClass, true, false, true);
            packItem.push(tmpItem);
        }
    } else {
        packItem = new Object();
        if (typeof (instances.CurrentAmount) != 'undefined') {
            itmServiceStart = instances.EffectiveTime;
            itmServiceEnd = instances.ExpirationTime;
            currentAmtBts = getHoursDiff(itmServiceStart, itmServiceEnd, true);
            initialAmtBts = getHoursDiff(itmServiceStart, itmServiceEnd, false);
            consumptionAmtBts = initialAmtBts - currentAmtBts;
            itmOffer = typeof (instances.OfferingKey) != 'undefined' ? instances.OfferingKey.OfferingID : '0';
            itmProduct = typeof (instances.productId) != 'undefined' ? instances.productId : '0';
            itmPurchaseSeq = typeof (instances.OfferingKey) != 'undefined' ? instances.OfferingKey.PurchaseSeq : '0';
            itmName = instances.offerName;
            itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
            itmQtaValue = getUnit(initialAmtBts, 'HR');
            itmQtaConsumption = getUnit(consumptionAmtBts, 'HR');
            itmQtaBalance = getUnit(currentAmtBts, 'HR');
            packItem = setItem(itmOffer, itmProduct, itmPurchaseSeq, itmName, itmType, itmMeasure, itmServiceStart,
                itmServiceEnd, itmQtaPrcntg, itmQtaValue, itmQtaConsumption, itmQtaBalance, itmClass, true, false, true);
        }
    }
    return packItem;
}

function getHoursDiff(pIni, pFin, sysdate) {
    var initialDate = !sysdate ? getCbsDate(pIni) : new Date();
    var endDate = getCbsDate(pFin);
    var vDiffMillis = Math.abs(endDate.getTime() - initialDate.getTime());
    var vHourDiff = Math.ceil(vDiffMillis / (60 * 60 * 1000))
    return vHourDiff;
}

function getActiveApps(pArray) {
    var activeArray = new Array();
    for (var i = 0; i &lt; pArray.length; i++) {
         if(java.lang.Thread.interrupted()){
				break;
			}
        if (pArray[i] instanceof Array) {
            activeArray.push(pArray[i][0].OfferingKey.PurchaseSeq);
        } else {
            activeArray.push(pArray[i].OfferingKey.PurchaseSeq);
        }
    }
    return activeArray;
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_12" sourceRef="ServiceTask_2" targetRef="ScriptTask_9"/>
    <bpmn2:scriptTask id="ScriptTask_10" name="setPackages">
      <bpmn2:incoming>SequenceFlow_22</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_23</bpmn2:outgoing>
      <bpmn2:script>var packages = new Object();
if(typeof(packageWallet) != 'undefined'){
    packInstances = getSortedItems(snatchInstances(packageWallet.FreeUnitItemDetail, bundlePackChildOffers, false, true, true));
    tmpInstances = splitInstances(packInstances, activePackSeq);
    packages = setPackage(tmpInstances);
} else {
    packages.active = new Object();
    packages.queued = new Array();
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_13" sourceRef="ScriptTask_9" targetRef="ServiceTask_5"/>
    <bpmn2:scriptTask id="ScriptTask_11" name="processOfferings">
      <bpmn2:incoming>SequenceFlow_17</bpmn2:incoming>
      <bpmn2:incoming>SequenceFlow_29</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_14</bpmn2:outgoing>
      <bpmn2:script>var actOfferItem = new Object();
var actOfferId = '0';

var actOfferItemPrimary=new Object();
var actOfferIdPrimary='0';


if(navObject.offeringJson.filled){
    
    doLoop = forCounter &lt; supplementaryOffers.length;
       //doLoop=true;
    
    if(doLoop){
        actOfferItem = supplementaryOffers[forCounter];

        if(typeof(actOfferItem.OfferingKey) != 'undefined'){
            actOfferId = actOfferItem.OfferingKey.OfferingID;
        }
    } else {
        forCounter = 0;
        enrichedOfferings.appOfferings = getSortedItems(enrichedOfferings.appOfferings);
        enrichedOfferings.susOfferings = getSortedItems(enrichedOfferings.susOfferings);
        enrichedOfferings.cmbOfferings = getSortedItems(enrichedOfferings.cmbOfferings);
        //enrichedOfferings.planOfferings = getSortedItems(enrichedOfferings.planOfferings);
        //enrichedOfferings.addonsOfferings=getSortedItems(enrichedOfferings.addonsOfferings);
    }
}


</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_14" sourceRef="ScriptTask_11" targetRef="ExclusiveGateway_1"/>
    <bpmn2:exclusiveGateway id="ExclusiveGateway_1" name="loop">
      <bpmn2:incoming>SequenceFlow_14</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_18</bpmn2:outgoing>
      <bpmn2:outgoing>SequenceFlow_19</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:sequenceFlow id="SequenceFlow_18" sourceRef="ExclusiveGateway_1" targetRef="ScriptTask_13">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" id="FormalExpression_233">!doLoop</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="SequenceFlow_19" sourceRef="ExclusiveGateway_1" targetRef="ScriptTask_5">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" id="FormalExpression_232">doLoop</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:scriptTask id="ScriptTask_13" name="setBundles">
      <bpmn2:incoming>SequenceFlow_18</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_22</bpmn2:outgoing>
      <bpmn2:script>var bundlePackOffers = new Array();
var bundlePlanOffers=new Array();
var bundleAppOffers = new Array();
var bundlePackChildOffers = new Array();
var bundlePlanChildOffers=new Array();
var bundleAppChildOffers = new Array();
var bundles = new Array();
var bundle;
var bndlIdntfr = 'cmb';
var bndlPropName = 'C_REMARKS2';
var cmbOffers;

if(enrichedOfferings.cmbOfferings.length > 0 &amp;&amp; !vSkipBundle){
    cmbOffers = enrichedOfferings.cmbOfferings;
    for(var i = 0; i &lt; cmbOffers.length; i++){
        bundle = setItem(cmbOffers[i].OfferingKey.OfferingID, cmbOffers[i].productId, cmbOffers[i].OfferingKey.PurchaseSeq, 
                cmbOffers[i].offerName, cmbOffers[i].offerType, 'Cmb', '-', 
                '-', '-', '-', '-', '-', 'Vigente');
        bundlePackOffers = findChildren(cmbOffers[i].OfferingKey.PurchaseSeq, bndlIdntfr, enrichedOfferings.packOfferings);
        bundlePackOffers = bundlePackOffers.
            concat(findChildren(cmbOffers[i].OfferingKey.PurchaseSeq, bndlIdntfr, enrichedOfferings.undefOfferings));
        bundleAppOffers = findChildren(cmbOffers[i].OfferingKey.PurchaseSeq, bndlIdntfr, enrichedOfferings.appOfferings);
        //LOGGER.info('paquetes:' + bundlePackOffers.join());
        if(cmbOffers[i].isPackage){
            bundlePackOffers.push(cmbOffers[i].OfferingKey.PurchaseSeq);  
        }

        bundlePackChildOffers = bundlePackChildOffers.concat(bundlePackOffers);
        bundleAppChildOffers = bundleAppChildOffers.concat(bundleAppOffers);

        if(typeof(packageWallet) != 'undefined' &amp;&amp; bundlePackOffers.length > 0){
            packInstances = getSortedItems(snatchInstances(packageWallet.FreeUnitItemDetail, bundlePackOffers, true, true, true));
            tmpInstances = splitInstances(packInstances, activePackSeq);
            bundle.packages = setPackage(tmpInstances);
        } else {
            bundle.packages = new Object();
        }

        if(enrichedOfferings.appOfferings.length > 0 &amp;&amp; bundleAppOffers.length > 0){
            activeAppsSeq = getActiveApps(splitApps(enrichedOfferings.appOfferings));
            packInstances = snatchInstances(enrichedOfferings.appOfferings, bundleAppOffers, true, false, true);
            bundle.applications = setApplications(splitOffers(splitApps(packInstances), activeAppsSeq));
        } else{
            bundle.applications = new Object();
        }
        //if(bundlePackOffers.length > 0 || bundleAppOffers.length > 0){
            //bundles.push(bundle);
        //}
        var  vPushBundle = false;
        if (typeof bundle.packages.active != 'undefined' &amp;&amp; typeof bundle.packages.active.offering != 'undefined') {
            vPushBundle = true;
        }
        if (typeof bundle.packages.queued != 'undefined') {
            if (bundle.packages.queued instanceof Array &amp;&amp; typeof bundle.packages.queued[0] != 'undefined'){
                vPushBundle = true;
            }
            else {
                if (typeof bundle.packages.queued.offering != 'undefined') {
                    vPushBundle = true;
                }
            }
        } 
        if (typeof bundle.applications.active != 'undefined') {
            if (bundle.applications.active instanceof Array &amp;&amp; typeof bundle.applications.active[0] != 'undefined'){
                vPushBundle = true;
            }
            else {
                if (typeof bundle.applications.active.offering != 'undefined') {
                    vPushBundle = true;
                }
            }
        }
        if (typeof bundle.applications.queued != 'undefined') {
            if (bundle.applications.queued instanceof Array &amp;&amp; typeof bundle.applications.queued[0] != 'undefined'){
                vPushBundle = true;
            }
            else {
                if (typeof bundle.applications.queued.offering != 'undefined') {
                    vPushBundle = true;
                }
            }
        }        
        if (vPushBundle) {
            bundles.push(bundle);
        }
    }
}


function findChildren(parentOffer, idntfr, offerItem){
    var children = new Array();
    var remarkProp;
    LOGGER.info('JSON: ' + JSON.stringify(offerItem));
    for(var i = 0; i &lt; offerItem.length; i++){
        if(typeof(offerItem[i].OInstProperty) != 'undefined' &amp;&amp; typeof(offerItem[i].OfferingKey) != 'undefined'){
            remarkProp = getProperty(offerItem[i].OInstProperty, bndlPropName);
            LOGGER.info('remarkProp: ' + JSON.stringify(remarkProp));
            if(typeof(remarkProp) != 'undefined'){
                LOGGER.info('parentOffer: ' + parentOffer);
                if(isParent(parentOffer, idntfr, remarkProp)){
                    children.push(offerItem[i].OfferingKey.PurchaseSeq)
                }
            }
        }
    }
    return children;
}


function isParent(parentId, transIdntfr, childRemark){
    var remarkArray = childRemark.Value.split(';');
    var identifier = remarkArray[0];
    var flag = false;
    if(identifier.toLowerCase() == transIdntfr &amp;&amp; remarkArray.length > 1){
        flag = parentId == remarkArray[1];
    }
    return flag;
}


function getProperty(propArray, propName){
    var propItem;
    if(propArray instanceof Array){
        for(var i = 0; i &lt; propArray.length; i++){
            if(propArray[i].PropCode == propName){
                propItem = propArray[i];
                break;
            }
        }
    } else {
        if(propArray.PropCode == propName){
            propItem = propArray;
        }
    }
    return propItem;
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:scriptTask id="ScriptTask_15" name="setApplications">
      <bpmn2:incoming>SequenceFlow_23</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_24</bpmn2:outgoing>
      <bpmn2:script>var applications = {active: [], queued: []};
var appOffers;
var tmpApp = {active: [], queued: []};
var tmpItem;
if(enrichedOfferings.appOfferings.length > 0){
    if(vUnifyApps){
        if(navObject.pccJson.filled){
            if(typeof(navObject.pccJson.obj.Applications) != 'undefined'){
                for(var i = 0; i &lt; navObject.pccJson.obj.Applications.length; i++){
                    tmpItem = new Object();
                    tmpItem.EffectiveTime = String(navObject.pccJson.obj.Applications[i].ServiceStartDate);
                    tmpItem.ExpirationTime = String(navObject.pccJson.obj.Applications[i].ServiceEndDate);
                    tmpItem.offerName = navObject.pccJson.obj.Applications[i].ProductName;
                    tmpApp.active.push(tmpItem);
                }
                applications = setApplications(tmpApp);
            }
        }
    } else {
        activeAppsSeq = getActiveApps(splitApps(enrichedOfferings.appOfferings));
        //LOGGER.info('active apps: ' + activeAppsSeq.join());
        appOffers = snatchInstances(enrichedOfferings.appOfferings, bundleAppChildOffers, false, false, true);
        //LOGGER.info('appOffers: ' + JSON.stringify(appOffers));
        applications = setApplications(splitOffers(splitApps(appOffers), activeAppsSeq));
    }
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_22" sourceRef="ScriptTask_13" targetRef="ScriptTask_10"/>
    <bpmn2:sequenceFlow id="SequenceFlow_23" sourceRef="ScriptTask_10" targetRef="ScriptTask_15"/>
    <bpmn2:scriptTask id="ScriptTask_16" name="processSubscriptions">
      <bpmn2:incoming>SequenceFlow_24</bpmn2:incoming>
      <bpmn2:incoming>SequenceFlow_28</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_25</bpmn2:outgoing>
      <bpmn2:script>var actOfferItem = new Object();
var actProfileId = '0';
var subscriptions = new Array();

if(enrichedOfferings.susOfferings.length > 0){
    doLoop = forCounter &lt; enrichedOfferings.susOfferings.length;

    LOGGER.info(tLinea+'doLoop:'+doLoop+tLinea);
    LOGGER.info(tLinea+'forCounter:'+forCounter+tLinea);
    LOGGER.info(tLinea+'enrichedOfferings.susOfferings.length:'+enrichedOfferings.susOfferings.length+tLinea);

    if(doLoop){
        actOfferItem = enrichedOfferings.susOfferings[forCounter];

        if(typeof(actOfferItem.productProfile) != 'undefined'){
            actProfileId = actOfferItem.productProfile;
        }

        forCounter++;
    } else {
        forCounter = 0;
    }
}

function setSubscription(pSubsItem){
    var subsItem = new Object();
    var susWallet = new Object();
    var flag = false;

    if(pSubsItem.offerType == 'SUS'){
        susWallet = getWalletObj(strSusBalance, navObject.walletJson);
        flag = typeof(susWallet) != 'undefined';
        if (flag) 
            subsItem = setSubsItems(pSubsItem, susWallet.FreeUnitItemDetail, false, flag, pSubsItem.offerType);
        else 
            subsItem = setSubsItems(pSubsItem, null, false, flag, pSubsItem.offerType);

    } else {
        subsItem = setSubsItems(pSubsItem, null, false, false, pSubsItem.offerType);
    }

    return subsItem;
}

function setSubsItems(susOffer, instances, queue, hasWallet, offerType){
    var packItem;
    var tmpItem;
    var currentAmtBts = 0;
    var initialAmtBts = 0;
    var consumptionAmtBts = 0;
    var reservedAmount = 0;
    var itmClass = !queue ? 'Vigente' : 'Encolado';
    var itmOffer = '';
    var itmProduct = '';
    var itmPurchaseSeq = '';
    var itmName = '';
    var itmType = 'Suscripcion';
    var itmMeasure = 'MB';
    var itmServiceStart = '';
    var itmServiceEnd = '';
    var itmQtaPrcntg = '';
    var itmQtaValue = '';
    var itmQtaConsumption = '';
    var itmQtaBalance = '';
    var itmActive = false;
    
    packItem = new Object();
    itmOffer = susOffer.OfferingKey.OfferingID;
    itmProduct = susOffer.productId;
    itmPurchaseSeq = susOffer.OfferingKey.PurchaseSeq;
    itmName = susOffer.offerName;
    itmServiceStart = susOffer.EffectiveTime;
    itmServiceEnd = susOffer.ExpirationTime;
    itmActive = susOffer.susActive;
    
    var tproductQta = new Number(susOffer.productQta);
    
    if(offerType == 'SUS'){
        if (hasWallet &amp;&amp; tproductQta > 0) {
            if(typeof(instances.CurrentAmount) != 'undefined'){
                currentAmtBts = new Number(instances.CurrentAmount);
                initialAmtBts = new Number(susOffer.productQta);
                reservedAmount = new Number(instances.ReservationAmount);
                
                if(initialAmtBts > reservedAmount &amp;&amp; currentAmtBts > reservedAmount){
                    currentAmtBts = (currentAmtBts > initialAmtBts) ? initialAmtBts : currentAmtBts - reservedAmount;
                }

            }

            consumptionAmtBts = initialAmtBts - currentAmtBts;
            if (currentAmtBts > 0 &amp; initialAmtBts > 0)
                itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
            else 
                itmQtaPrcntg = '0.00';
            
            itmQtaValue = getUnit(initialAmtBts, 'KB');
            itmQtaConsumption = getUnit(consumptionAmtBts, 'KB');
            itmQtaBalance = getUnit(currentAmtBts, 'KB');
            itmMeasure = 'MB';
        } else {
            itmQtaPrcntg = '100.00';
            itmQtaValue = getUnit(0, 'KB');
            itmQtaConsumption = getUnit(0, 'KB');
            itmQtaBalance = getUnit(0, 'KB');
            itmMeasure = 'MB';
        }

        packItem = setItemSubs(itmOffer, itmProduct, itmPurchaseSeq, itmName, itmType, itmMeasure, itmServiceStart, 
        itmServiceEnd, itmQtaPrcntg, itmQtaValue, itmQtaConsumption, itmQtaBalance, itmClass, false, true, itmActive);
    } else {   
        currentAmtBts = getHoursDiff(itmServiceStart, itmServiceEnd, true);
        initialAmtBts = getHoursDiff(itmServiceStart, itmServiceEnd, false);
        consumptionAmtBts = initialAmtBts - currentAmtBts;
        itmQtaPrcntg = String(new Number((currentAmtBts / initialAmtBts) * 100).toFixed(2));
        itmQtaValue = getUnit(initialAmtBts, 'HRS');
        itmQtaConsumption = getUnit(consumptionAmtBts, 'HRS');
        itmQtaBalance = getUnit(currentAmtBts, 'HRS');
        itmMeasure = 'Hrs';
        
        packItem = setItemSubs(itmOffer, itmProduct, itmPurchaseSeq, itmName, itmType, itmMeasure, itmServiceStart, 
        itmServiceEnd, itmQtaPrcntg, itmQtaValue, itmQtaConsumption, itmQtaBalance, itmClass, true, true, itmActive);
    }
    
    return packItem;
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_24" sourceRef="ScriptTask_15" targetRef="ScriptTask_16"/>
    <bpmn2:exclusiveGateway id="ExclusiveGateway_2" name="loop" gatewayDirection="Diverging" default="SequenceFlow_40">
      <bpmn2:incoming>SequenceFlow_25</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_26</bpmn2:outgoing>
      <bpmn2:outgoing>SequenceFlow_40</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:sequenceFlow id="SequenceFlow_25" sourceRef="ScriptTask_16" targetRef="ExclusiveGateway_2"/>
    <bpmn2:scriptTask id="ScriptTask_17" name="enrichSubscriptions">
      <bpmn2:incoming>SequenceFlow_27</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_28</bpmn2:outgoing>
      <bpmn2:script>if(typeof(vSusActiveOffer) != 'undefined' &amp;&amp; typeof(vSusActivePurchaseSeq) != 'undefined'){    
    if(vSusActiveOffer == actOfferItem.OfferingKey.OfferingID &amp;&amp; vSusActivePurchaseSeq == actOfferItem.OfferingKey.PurchaseSeq){
        if(typeof(susActive) != 'undefined'){
            actOfferItem.susActive = susActive == '1';
        } else {
            actOfferItem.susActive = false;
        }

        subscriptionItems.push(setSubscription(actOfferItem));
    }
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_26" name="Si" sourceRef="ExclusiveGateway_2" targetRef="ServiceTask_8">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" id="FormalExpression_235">doLoop</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="SequenceFlow_27" sourceRef="ServiceTask_8" targetRef="ScriptTask_17"/>
    <bpmn2:sequenceFlow id="SequenceFlow_28" sourceRef="ScriptTask_17" targetRef="ScriptTask_16"/>
    <bpmn2:scriptTask id="ScriptTask_18" name="setAddonsCBS">
      <bpmn2:incoming>SequenceFlow_44</bpmn2:incoming>
      <bpmn2:incoming>SequenceFlow_45</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_20</bpmn2:outgoing>
      <bpmn2:script>/*****************************Addons CBS************************/
var addons = new Object();
var addonsT2 = new Object();
if (vSubscriberType != 'PRE') {
    if (typeof (addonWallet) != 'undefined') {
        if (typeof vAddonRetOffering != 'undefined') {
            activeAddSeq = vAddonRetOffering;
        } else {
            activeAddSeq = '';
        }
        addInstances = getSortedItems(snatchInstances(addonWallet.FreeUnitItemDetail, bundlePackChildOffers, false, true, true));
        tmpInstances_add = splitInstancesAddons(addInstances, activeAddSeq);
        addons = setAddCBS(tmpInstances_add, planBillCycle);
        addonsT2 = setRetAddon(tmpInstances_add);
    }
}
/**************************************************************/</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:serviceTask id="ServiceTask_12" name="MasterStatusGetSubscriberProfileTask" implementation="##WebService">
      <bpmn2:incoming>SequenceFlow_47</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_45</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_84">
        <bpmn2:dataInput id="DataInput_23" name="SUBSCRIBER"/>
        <bpmn2:dataInput id="DataInput_24" name="PROFILE"/>
        <bpmn2:dataInput id="DataInput_1" name="MasterStatusGetSubscriberProfileTask__failOverPolicy"/>
        <bpmn2:dataOutput id="DataOutput_95" name="EXPIRACION_OFERTA"/>
        <bpmn2:dataOutput id="DataOutput_1" name="ENTITLEMENT"/>
        <bpmn2:dataOutput id="DataOutput_22" name="OFFERING_ID"/>
        <bpmn2:inputSet id="InputSet_18" name="Input Set 5">
          <bpmn2:dataInputRefs>DataInput_24</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_23</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_1</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_18" name="Output Set 10">
          <bpmn2:dataOutputRefs>DataOutput_95</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_1</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_22</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_23">
        <bpmn2:targetRef>DataInput_23</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_117">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_242">subscriberId</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_243">DataInput_4</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_24">
        <bpmn2:targetRef>DataInput_24</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_118">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_244">vAddonProfile</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_245">DataInput_10</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_1">
        <bpmn2:targetRef>DataInput_1</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_2">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_6">false</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_4">DataInput_1</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_95">
        <bpmn2:sourceRef>DataOutput_95</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_119">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_246">DataOutput_7</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_247">vAddonRetExpire</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_1">
        <bpmn2:sourceRef>DataOutput_1</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_1">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_1">DataOutput_1</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_3">vAddonRetEntitlement</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_22">
        <bpmn2:sourceRef>DataOutput_22</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_36">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_37">DataOutput_22</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_78">vAddonRetOffering</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
    </bpmn2:serviceTask>
    <bpmn2:scriptTask id="ScriptTask_1" name="setPlanCBS">
      <bpmn2:incoming>SequenceFlow_21</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_2</bpmn2:outgoing>
      <bpmn2:script>//var plan = new Object();
//var user = new Object();

if (vSubscriberType != 'PRE') {
    if (!vIsPrimaryPlan) {
        if (typeof (planWallet) != 'undefined') {
            //
                var plan = new Object();
                var user = new Object();
            //
            activePlanSeq = vPurchaseSeqVAS;
            planInstances = getSortedItemsPospaid(snatchInstances(planWallet.FreeUnitItemDetail, bundlePlanChildOffers, false, true, false));
            tmpInstances_plan = splitInstancesPlan(planInstances, activePlanSeq);
            plan = setPlanCBS(tmpInstances_plan, planBillCycle);
        }
    } else {
        if (typeof (planWallet) != 'undefined') {
            //
                var plan = new Object();
                var user = new Object();
            //
            planInstances = getSortedItemsPospaid(snatchInstances(planWallet.FreeUnitItemDetail, bundlePlanChildOffers, false, true, false));
            tmpInstances_plan = splitInstancesPlan(planInstances, activePlanSeq);
            plan = setPlanCBS(tmpInstances_plan, planBillCycle);
        }

    }
}



    if (navObject.offeringJson.filled) {
        if (typeof (planBillCycle) != 'undefined') {
            user.subscriberId = subscriberId.toString();
            user.billCycle = parseInt(planBillCycle).toString();
            //user.billCycle = planBillCycle;
        }
    }</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:scriptTask id="ScriptTask_3" name="mashInfo">
      <bpmn2:incoming>SequenceFlow_2</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_3</bpmn2:outgoing>
      <bpmn2:script>var BPMN_RESPONSE_CODE = '0';
var BPMN_RESPONSE_MESSAGE = 'Operation Successful';
var servicesObj = {services: new Object()};
var JSON_RESPONSE = '';
servicesObj.services.bundles = bundles;
servicesObj.services.packages = packages;
servicesObj.services.subscriptions = subscriptionItems;
servicesObj.services.applications = applications ;
servicesObj.services.addons = addons;
servicesObj.services.addons_t2 = addonsT2;
servicesObj.services.plan = plan;
servicesObj.services.user = user;
JSON_RESPONSE = JSON.stringify(servicesObj);</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_2" sourceRef="ScriptTask_1" targetRef="ScriptTask_3"/>
    <bpmn2:sequenceFlow id="SequenceFlow_3" sourceRef="ScriptTask_3" targetRef="EndEvent_1"/>
    <bpmn2:serviceTask id="ServiceTask_3" name="MasterStatusGetSubscriberProfileTask" implementation="##WebService">
      <bpmn2:incoming>SequenceFlow_9</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_5</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_47">
        <bpmn2:dataInput id="DataInput_3" name="SUBSCRIBER"/>
        <bpmn2:dataInput id="DataInput_7" name="PROFILE"/>
        <bpmn2:dataOutput id="DataOutput_6" name="FECHA_ACTIVACION"/>
        <bpmn2:dataOutput id="DataOutput_7" name="FECHA_ALTA_ANEXO"/>
        <bpmn2:dataOutput id="DataOutput_8" name="TIPO_SUSCRIPTOR"/>
        <bpmn2:dataOutput id="DataOutput_9" name="FECHA_ACTIVACION_DATE"/>
        <bpmn2:dataOutput id="DataOutput_10" name="PLAN_VOZ"/>
        <bpmn2:inputSet id="InputSet_4" name="Input Set 5">
          <bpmn2:dataInputRefs>DataInput_7</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_3</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_4" name="Output Set 10">
          <bpmn2:dataOutputRefs>DataOutput_6</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_7</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_8</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_9</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_10</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_3">
        <bpmn2:targetRef>DataInput_3</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_11">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_21">subscriberId</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_22">DataInput_4</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_7">
        <bpmn2:targetRef>DataInput_7</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_12">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_23">'24'</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_24">DataInput_10</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_6">
        <bpmn2:sourceRef>DataOutput_6</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_17">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_33">DataOutput_7</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_34">vAltaNumero</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_7">
        <bpmn2:sourceRef>DataOutput_7</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_13">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_25">DataOutput_3</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_26">vAltaAnexo</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_8">
        <bpmn2:sourceRef>DataOutput_8</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_14">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_27">DataOutput_5</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_28">vSubscriberType</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_9">
        <bpmn2:sourceRef>DataOutput_9</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_15">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_29">DataOutput_14</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_30">vMSAltaDate</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_10">
        <bpmn2:sourceRef>DataOutput_10</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_16">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_31">DataOutput_1</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_32">vPlanVoz</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
    </bpmn2:serviceTask>
    <bpmn2:scriptTask id="ScriptTask_6" name="Subscriber">
      <bpmn2:incoming>SequenceFlow_5</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_15</bpmn2:outgoing>
      <bpmn2:script>var typeSubscriber = 'PRE,HIC,CIN,HIB,HIB20,POS';
var vSubscriberFound = false;

if(typeof vSubscriberType != 'undefined'){
    if(typeSubscriber.indexOf(vSubscriberType) &lt; 0){
        vSubscriberType = 'POS';
    }
    if(vSubscriberType == 'CIN'){
        vSubscriberType = 'HIC';
    }
    vSubscriberFound = true;
}


LOGGER.info(tLinea+'vSubscriberType:'+vSubscriberType+tLinea);
</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_5" sourceRef="ServiceTask_3" targetRef="ScriptTask_6"/>
    <bpmn2:exclusiveGateway id="ExclusiveGateway_3" name="Subscriber">
      <bpmn2:incoming>SequenceFlow_15</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_16</bpmn2:outgoing>
      <bpmn2:outgoing>SequenceFlow_31</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:sequenceFlow id="SequenceFlow_15" sourceRef="ScriptTask_6" targetRef="ExclusiveGateway_3"/>
    <bpmn2:sequenceFlow id="SequenceFlow_16" sourceRef="ExclusiveGateway_3" targetRef="ServiceTask_4">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" id="FormalExpression_36">vSubscriberFound</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="SequenceFlow_31" sourceRef="ExclusiveGateway_3" targetRef="ScriptTask_9">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" id="FormalExpression_35">!vSubscriberFound</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:exclusiveGateway id="ExclusiveGateway_7" name="Pospaid" gatewayDirection="Diverging" default="SequenceFlow_44">
      <bpmn2:incoming>SequenceFlow_40</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_44</bpmn2:outgoing>
      <bpmn2:outgoing>SequenceFlow_46</bpmn2:outgoing>
    </bpmn2:exclusiveGateway>
    <bpmn2:sequenceFlow id="SequenceFlow_40" name="No" sourceRef="ExclusiveGateway_2" targetRef="ExclusiveGateway_7"/>
    <bpmn2:sequenceFlow id="SequenceFlow_44" name="No" sourceRef="ExclusiveGateway_7" targetRef="ScriptTask_18"/>
    <bpmn2:sequenceFlow id="SequenceFlow_45" sourceRef="ServiceTask_12" targetRef="ScriptTask_18"/>
    <bpmn2:serviceTask id="ServiceTask_7" name="MasterStatusGetSubscriberProfileTask">
      <bpmn2:incoming>SequenceFlow_46</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_47</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_36">
        <bpmn2:dataInput id="DataInput_22" name="SUBSCRIBER"/>
        <bpmn2:dataInput id="DataInput_25" name="PROFILE"/>
        <bpmn2:dataOutput id="DataOutput_25" name="PLAN_VAS_OFFERING"/>
        <bpmn2:dataOutput id="DataOutput_26" name="ENTITLEMENT_APP_VAS"/>
        <bpmn2:dataOutput id="DataOutput_27" name="PLAN_VAS_PURCHASE_SEQ"/>
        <bpmn2:inputSet id="InputSet_38" name="Input Set 47">
          <bpmn2:dataInputRefs>DataInput_22</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_25</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_38" name="Output Set 57">
          <bpmn2:dataOutputRefs>DataOutput_25</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_26</bpmn2:dataOutputRefs>
          <bpmn2:dataOutputRefs>DataOutput_27</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_22">
        <bpmn2:targetRef>DataInput_22</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_42">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_91">subscriberId</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_92">DataInput_37</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_25">
        <bpmn2:targetRef>DataInput_25</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_43">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_93">'111'</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_94">DataInput_38</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_25">
        <bpmn2:sourceRef>DataOutput_25</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_44">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_95">DataOutput_18</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_96">vOfferingPlanVAS</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_26">
        <bpmn2:sourceRef>DataOutput_26</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_45">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_97">DataOutput_19</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_98">vAppServiceVAS</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_27">
        <bpmn2:sourceRef>DataOutput_27</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_46">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_99">DataOutput_1</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_100">vPurchaseSeqVAS</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
    </bpmn2:serviceTask>
    <bpmn2:sequenceFlow id="SequenceFlow_46" name="Si" sourceRef="ExclusiveGateway_7" targetRef="ServiceTask_7">
      <bpmn2:conditionExpression xsi:type="bpmn2:tFormalExpression" id="FormalExpression_101">vSubscriberType != 'PRE'</bpmn2:conditionExpression>
    </bpmn2:sequenceFlow>
    <bpmn2:sequenceFlow id="SequenceFlow_47" sourceRef="ServiceTask_7" targetRef="ServiceTask_12"/>
    <bpmn2:scriptTask id="ScriptTask_14" name="validaPrimary">
      <bpmn2:incoming>SequenceFlow_20</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_21</bpmn2:outgoing>
      <bpmn2:script>var vIsPrimaryPlan=true;


if(typeof vOfferingPlanVAS != 'undefined' &amp;&amp; vOfferingPlanVAS != 'NA'){
	vIsPrimaryPlan=false;
}

</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:scriptTask id="ScriptTask_5" name="erichOfferingOptimized">
      <bpmn2:incoming>SequenceFlow_19</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_29</bpmn2:outgoing>
      <bpmn2:script>//actOfferId: offering de cbs
//var vQueryOffering
var vOfferingItem = '';

actOfferItem.productId = &quot;0&quot;;
actOfferItem.offerType = &quot;NA&quot;;
actOfferItem.offerName = &quot;NA&quot;;
actOfferItem.productProfile = &quot;0&quot;;
actOfferItem.productQta = &quot;0&quot;;
actOfferItem.isPackage = false;

if (typeof vQueryOfferingObjects != 'undefined') {
    vOfferingItem = vQueryOfferingObjects[actOfferId];
    if (typeof vOfferingItem != 'undefined') {
        actOfferItem.productId = vOfferingItem.PRODUCT_ID;
        actOfferItem.offerType = vOfferingItem.TYPE;
        actOfferItem.offerName = vOfferingItem.PRODUCT_NAME;
        actOfferItem.productProfile = vOfferingItem.PROFILE;
        actOfferItem.productQta = vOfferingItem.QTA;
        actOfferItem.isPackage = vOfferingItem.PACKAGE == 'TRUE' ? true : false;
    }
} 

// else {
//     actOfferItem.productId = &quot;0&quot;;
//     actOfferItem.offerType = &quot;NA&quot;;
//     actOfferItem.offerName = &quot;NA&quot;;
//     actOfferItem.productProfile = &quot;0&quot;;
//     actOfferItem.productQta = &quot;0&quot;;
//     actOfferItem.isPackage = false;
// }


var cnfProductId = &quot;0&quot;;
var cnfType = &quot;NA&quot;;
var cnfProductName = &quot;NA&quot;;
var cnfProfile = &quot;0&quot;;
var cnfQta = &quot;0&quot;;
var cnfPck = &quot;FALSE&quot;;


enrichedOfferings = setEnrichment(enrichedOfferings, actOfferItem);
forCounter++;</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:serviceTask id="ServiceTask_5" name="RuleEngineTask" implementation="##WebService">
      <bpmn2:incoming>SequenceFlow_13</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_4</bpmn2:outgoing>
      <bpmn2:ioSpecification id="InputOutputSpecification_7">
        <bpmn2:dataInput id="DataInput_19" name="SESSION"/>
        <bpmn2:dataInput id="DataInput_21" name="OFFERING"/>
        <bpmn2:dataInput id="DataInput_27" name="RuleEngineTask__failOverPolicy"/>
        <bpmn2:dataOutput id="DataOutput_23" name="RESULT"/>
        <bpmn2:inputSet id="InputSet_7" name="Input Set 35">
          <bpmn2:dataInputRefs>DataInput_19</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_21</bpmn2:dataInputRefs>
          <bpmn2:dataInputRefs>DataInput_27</bpmn2:dataInputRefs>
        </bpmn2:inputSet>
        <bpmn2:outputSet id="OutputSet_7" name="Output Set 14">
          <bpmn2:dataOutputRefs>DataOutput_23</bpmn2:dataOutputRefs>
        </bpmn2:outputSet>
      </bpmn2:ioSpecification>
      <bpmn2:dataInputAssociation id="DataInputAssociation_19">
        <bpmn2:targetRef>DataInput_19</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_37">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_74">'QueryOfferingInfoOptimizedKS'</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_75">DataInput_18</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_21">
        <bpmn2:targetRef>DataInput_21</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_38">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_76">'1'</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_77">DataInput_19</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataInputAssociation id="DataInputAssociation_27">
        <bpmn2:targetRef>DataInput_27</bpmn2:targetRef>
        <bpmn2:assignment id="Assignment_39">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_79">false</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_80">DataInput_10</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataInputAssociation>
      <bpmn2:dataOutputAssociation id="DataOutputAssociation_23">
        <bpmn2:sourceRef>DataOutput_23</bpmn2:sourceRef>
        <bpmn2:assignment id="Assignment_40">
          <bpmn2:from xsi:type="bpmn2:tFormalExpression" id="FormalExpression_81">DataOutput_89</bpmn2:from>
          <bpmn2:to xsi:type="bpmn2:tFormalExpression" id="FormalExpression_82">vQueryOffering</bpmn2:to>
        </bpmn2:assignment>
      </bpmn2:dataOutputAssociation>
    </bpmn2:serviceTask>
    <bpmn2:scriptTask id="ScriptTask_7" name="JSON.parse">
      <bpmn2:incoming>SequenceFlow_4</bpmn2:incoming>
      <bpmn2:outgoing>SequenceFlow_17</bpmn2:outgoing>
      <bpmn2:script>var doubleQuote = '&quot;';
var regExpQuotes = /'/g;
var vJson = '';
var vQueryOfferingObjects = '';

if (typeof vQueryOffering != 'undefined') {
	vJson = &quot;{&quot; + vQueryOffering.replace(regExpQuotes, doubleQuote) + &quot;}&quot;;
	vQueryOfferingObjects = JSON.parse(vJson);
}</bpmn2:script>
    </bpmn2:scriptTask>
    <bpmn2:sequenceFlow id="SequenceFlow_4" sourceRef="ServiceTask_5" targetRef="ScriptTask_7"/>
    <bpmn2:sequenceFlow id="SequenceFlow_17" sourceRef="ScriptTask_7" targetRef="ScriptTask_11"/>
    <bpmn2:sequenceFlow id="SequenceFlow_29" sourceRef="ScriptTask_5" targetRef="ScriptTask_11"/>
    <bpmn2:sequenceFlow id="SequenceFlow_20" sourceRef="ScriptTask_18" targetRef="ScriptTask_14"/>
    <bpmn2:sequenceFlow id="SequenceFlow_21" sourceRef="ScriptTask_14" targetRef="ScriptTask_1"/>
  </bpmn2:process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_1" name="Default Process Diagram">
    <bpmndi:BPMNPlane id="BPMNPlane_1" bpmnElement="ConsultaDatos2">
      <bpmndi:BPMNShape id="BPMNShape_1" bpmnElement="StartEvent_1">
        <dc:Bounds height="36.0" width="36.0" x="58.0" y="7.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_1" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="68.0" x="42.0" y="43.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_2" bpmnElement="EndEvent_1">
        <dc:Bounds height="36.0" width="36.0" x="1721.0" y="1236.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_2" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="65.0" x="1707.0" y="1272.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ServiceTask_1" bpmnElement="ServiceTask_2">
        <dc:Bounds height="50.0" width="110.0" x="188.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_3" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="45.0" width="95.0" x="195.0" y="702.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_1" bpmnElement="ScriptTask_2">
        <dc:Bounds height="50.0" width="110.0" x="188.0" y="110.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_4" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="77.0" x="204.0" y="127.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ServiceTask_2" bpmnElement="ServiceTask_4">
        <dc:Bounds height="50.0" width="110.0" x="0.0" y="481.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_5" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="30.0" width="158.0" x="-24.0" y="491.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_2" bpmnElement="ScriptTask_4">
        <dc:Bounds height="50.0" width="110.0" x="188.0" y="198.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_6" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="74.0" x="206.0" y="215.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ServiceTask_4" bpmnElement="ServiceTask_8">
        <dc:Bounds height="50.0" width="110.0" x="1072.0" y="929.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_8" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="45.0" width="101.0" x="1076.0" y="931.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ServiceTask_5" bpmnElement="ServiceTask_10">
        <dc:Bounds height="50.0" width="110.0" x="0.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_9" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="106.0" x="2.0" y="717.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_4" bpmnElement="ScriptTask_8">
        <dc:Bounds height="50.0" width="110.0" x="188.0" y="0.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_10" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="54.0" x="216.0" y="17.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_5" bpmnElement="ScriptTask_9">
        <dc:Bounds height="50.0" width="110.0" x="388.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_17" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="59.0" x="413.0" y="717.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_6" bpmnElement="ScriptTask_10">
        <dc:Bounds height="50.0" width="110.0" x="1106.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_19" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="72.0" x="1125.0" y="717.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_7" bpmnElement="ScriptTask_11">
        <dc:Bounds height="50.0" width="110.0" x="555.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_21" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="95.0" x="562.0" y="717.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ExclusiveGateway_1" bpmnElement="ExclusiveGateway_1" isMarkerVisible="true">
        <dc:Bounds height="50.0" width="50.0" x="798.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_24" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="24.0" x="811.0" y="750.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_9" bpmnElement="ScriptTask_13">
        <dc:Bounds height="50.0" width="110.0" x="944.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_29" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="63.0" x="967.0" y="717.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_11" bpmnElement="ScriptTask_15">
        <dc:Bounds height="50.0" width="110.0" x="1294.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_30" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="84.0" x="1307.0" y="717.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_12" bpmnElement="ScriptTask_16">
        <dc:Bounds height="50.0" width="131.0" x="1283.0" y="820.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_33" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="121.0" x="1288.0" y="837.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ExclusiveGateway_2" bpmnElement="ExclusiveGateway_2" isMarkerVisible="true">
        <dc:Bounds height="50.0" width="50.0" x="1323.0" y="929.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_35" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="24.0" x="1336.0" y="979.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_13" bpmnElement="ScriptTask_17">
        <dc:Bounds height="50.0" width="126.0" x="1064.0" y="820.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_37" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="110.0" x="1072.0" y="837.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_14" bpmnElement="ScriptTask_18">
        <dc:Bounds height="50.0" width="110.0" x="1400.0" y="1028.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_41" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="84.0" x="1413.0" y="1045.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ServiceTask_6" bpmnElement="ServiceTask_12">
        <dc:Bounds height="50.0" width="110.0" x="1589.0" y="1028.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_43" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="45.0" width="101.0" x="1593.0" y="1030.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_3" bpmnElement="ScriptTask_1">
        <dc:Bounds height="50.0" width="110.0" x="1401.0" y="1229.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_45" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="67.0" x="1422.0" y="1246.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_10" bpmnElement="ScriptTask_3">
        <dc:Bounds height="50.0" width="110.0" x="1560.0" y="1229.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_47" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="52.0" x="1589.0" y="1246.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ServiceTask_7" bpmnElement="ServiceTask_3">
        <dc:Bounds height="50.0" width="110.0" x="188.0" y="282.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_50" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="45.0" width="101.0" x="192.0" y="284.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_15" bpmnElement="ScriptTask_6">
        <dc:Bounds height="50.0" width="110.0" x="188.0" y="378.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_51" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="60.0" x="213.0" y="395.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ExclusiveGateway_3" bpmnElement="ExclusiveGateway_3" isMarkerVisible="true">
        <dc:Bounds height="50.0" width="50.0" x="218.0" y="481.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_53" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="60.0" x="213.0" y="531.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ExclusiveGateway_7" bpmnElement="ExclusiveGateway_7" isMarkerVisible="true">
        <dc:Bounds height="50.0" width="50.0" x="1430.0" y="929.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_56" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="46.0" x="1432.0" y="979.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ServiceTask_10" bpmnElement="ServiceTask_7" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="1589.0" y="929.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_73" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="45.0" width="101.0" x="1593.0" y="931.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_18" bpmnElement="ScriptTask_14" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="1400.0" y="1120.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_79" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="74.0" x="1418.0" y="1137.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_16" bpmnElement="ScriptTask_5" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="768.0" y="590.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_42" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="30.0" width="77.0" x="784.0" y="600.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ServiceTask_9" bpmnElement="ServiceTask_5">
        <dc:Bounds height="50.0" width="110.0" x="388.0" y="809.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_44" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="92.0" x="397.0" y="826.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape id="BPMNShape_ScriptTask_17" bpmnElement="ScriptTask_7" isExpanded="true">
        <dc:Bounds height="50.0" width="110.0" x="555.0" y="809.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_59" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="67.0" x="576.0" y="826.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_4" bpmnElement="SequenceFlow_6" sourceElement="BPMNShape_1" targetElement="BPMNShape_ScriptTask_4">
        <di:waypoint xsi:type="dc:Point" x="94.0" y="25.0"/>
        <di:waypoint xsi:type="dc:Point" x="188.0" y="25.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_11" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_5" bpmnElement="SequenceFlow_7" sourceElement="BPMNShape_ScriptTask_4" targetElement="BPMNShape_ScriptTask_1">
        <di:waypoint xsi:type="dc:Point" x="243.0" y="50.0"/>
        <di:waypoint xsi:type="dc:Point" x="243.0" y="110.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_12" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_6" bpmnElement="SequenceFlow_8" sourceElement="BPMNShape_ScriptTask_1" targetElement="BPMNShape_ScriptTask_2">
        <di:waypoint xsi:type="dc:Point" x="243.0" y="160.0"/>
        <di:waypoint xsi:type="dc:Point" x="243.0" y="198.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_13" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_7" bpmnElement="SequenceFlow_9" sourceElement="BPMNShape_ScriptTask_2" targetElement="BPMNShape_ServiceTask_7">
        <di:waypoint xsi:type="dc:Point" x="243.0" y="248.0"/>
        <di:waypoint xsi:type="dc:Point" x="243.0" y="282.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_14" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_8" bpmnElement="SequenceFlow_10" sourceElement="BPMNShape_ServiceTask_2" targetElement="BPMNShape_ServiceTask_5">
        <di:waypoint xsi:type="dc:Point" x="55.0" y="531.0"/>
        <di:waypoint xsi:type="dc:Point" x="55.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_15" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_9" bpmnElement="SequenceFlow_11" sourceElement="BPMNShape_ServiceTask_5" targetElement="BPMNShape_ServiceTask_1">
        <di:waypoint xsi:type="dc:Point" x="110.0" y="725.0"/>
        <di:waypoint xsi:type="dc:Point" x="188.0" y="725.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_16" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_10" bpmnElement="SequenceFlow_12" sourceElement="BPMNShape_ServiceTask_1" targetElement="BPMNShape_ScriptTask_5">
        <di:waypoint xsi:type="dc:Point" x="298.0" y="725.0"/>
        <di:waypoint xsi:type="dc:Point" x="388.0" y="725.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_18" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_11" bpmnElement="SequenceFlow_13" sourceElement="BPMNShape_ScriptTask_5" targetElement="BPMNShape_ServiceTask_9">
        <di:waypoint xsi:type="dc:Point" x="443.0" y="750.0"/>
        <di:waypoint xsi:type="dc:Point" x="443.0" y="779.0"/>
        <di:waypoint xsi:type="dc:Point" x="443.0" y="809.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_20" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_12" bpmnElement="SequenceFlow_14" sourceElement="BPMNShape_ScriptTask_7" targetElement="BPMNShape_ExclusiveGateway_1">
        <di:waypoint xsi:type="dc:Point" x="665.0" y="725.0"/>
        <di:waypoint xsi:type="dc:Point" x="798.0" y="725.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_22" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_16" bpmnElement="SequenceFlow_18" sourceElement="BPMNShape_ExclusiveGateway_1" targetElement="BPMNShape_ScriptTask_9">
        <di:waypoint xsi:type="dc:Point" x="848.0" y="725.0"/>
        <di:waypoint xsi:type="dc:Point" x="896.0" y="725.0"/>
        <di:waypoint xsi:type="dc:Point" x="944.0" y="725.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_25" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_17" bpmnElement="SequenceFlow_19" sourceElement="BPMNShape_ExclusiveGateway_1" targetElement="BPMNShape_ScriptTask_16">
        <di:waypoint xsi:type="dc:Point" x="823.0" y="700.0"/>
        <di:waypoint xsi:type="dc:Point" x="823.0" y="670.0"/>
        <di:waypoint xsi:type="dc:Point" x="823.0" y="640.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_26" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_20" bpmnElement="SequenceFlow_22" sourceElement="BPMNShape_ScriptTask_9" targetElement="BPMNShape_ScriptTask_6">
        <di:waypoint xsi:type="dc:Point" x="1054.0" y="725.0"/>
        <di:waypoint xsi:type="dc:Point" x="1080.0" y="725.0"/>
        <di:waypoint xsi:type="dc:Point" x="1106.0" y="725.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_31" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_21" bpmnElement="SequenceFlow_23" sourceElement="BPMNShape_ScriptTask_6" targetElement="BPMNShape_ScriptTask_11">
        <di:waypoint xsi:type="dc:Point" x="1216.0" y="725.0"/>
        <di:waypoint xsi:type="dc:Point" x="1255.0" y="725.0"/>
        <di:waypoint xsi:type="dc:Point" x="1294.0" y="725.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_32" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_22" bpmnElement="SequenceFlow_24" sourceElement="BPMNShape_ScriptTask_11" targetElement="BPMNShape_ScriptTask_12">
        <di:waypoint xsi:type="dc:Point" x="1349.0" y="750.0"/>
        <di:waypoint xsi:type="dc:Point" x="1349.0" y="785.0"/>
        <di:waypoint xsi:type="dc:Point" x="1348.0" y="820.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_34" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_23" bpmnElement="SequenceFlow_25" sourceElement="BPMNShape_ScriptTask_12" targetElement="BPMNShape_ExclusiveGateway_2">
        <di:waypoint xsi:type="dc:Point" x="1348.0" y="870.0"/>
        <di:waypoint xsi:type="dc:Point" x="1348.0" y="899.0"/>
        <di:waypoint xsi:type="dc:Point" x="1348.0" y="929.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_36" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_24" bpmnElement="SequenceFlow_26" sourceElement="BPMNShape_ExclusiveGateway_2" targetElement="BPMNShape_ServiceTask_4">
        <di:waypoint xsi:type="dc:Point" x="1323.0" y="954.0"/>
        <di:waypoint xsi:type="dc:Point" x="1253.0" y="954.0"/>
        <di:waypoint xsi:type="dc:Point" x="1182.0" y="954.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_38" labelStyle="BPMNLabelStyle_1">
          <dc:Bounds height="15.0" width="11.0" x="1248.0" y="955.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_25" bpmnElement="SequenceFlow_27" sourceElement="BPMNShape_ServiceTask_4" targetElement="BPMNShape_ScriptTask_13">
        <di:waypoint xsi:type="dc:Point" x="1127.0" y="929.0"/>
        <di:waypoint xsi:type="dc:Point" x="1127.0" y="900.0"/>
        <di:waypoint xsi:type="dc:Point" x="1127.0" y="870.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_39" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_26" bpmnElement="SequenceFlow_28" sourceElement="BPMNShape_ScriptTask_13" targetElement="BPMNShape_ScriptTask_12">
        <di:waypoint xsi:type="dc:Point" x="1190.0" y="845.0"/>
        <di:waypoint xsi:type="dc:Point" x="1236.0" y="845.0"/>
        <di:waypoint xsi:type="dc:Point" x="1283.0" y="845.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_40" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_2" bpmnElement="SequenceFlow_2" sourceElement="BPMNShape_ScriptTask_3" targetElement="BPMNShape_ScriptTask_10">
        <di:waypoint xsi:type="dc:Point" x="1511.0" y="1254.0"/>
        <di:waypoint xsi:type="dc:Point" x="1535.0" y="1254.0"/>
        <di:waypoint xsi:type="dc:Point" x="1560.0" y="1254.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_48" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_3" bpmnElement="SequenceFlow_3" sourceElement="BPMNShape_ScriptTask_10" targetElement="BPMNShape_2">
        <di:waypoint xsi:type="dc:Point" x="1670.0" y="1254.0"/>
        <di:waypoint xsi:type="dc:Point" x="1695.0" y="1254.0"/>
        <di:waypoint xsi:type="dc:Point" x="1721.0" y="1254.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_49" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_13" bpmnElement="SequenceFlow_5" sourceElement="BPMNShape_ServiceTask_7" targetElement="BPMNShape_ScriptTask_15">
        <di:waypoint xsi:type="dc:Point" x="243.0" y="332.0"/>
        <di:waypoint xsi:type="dc:Point" x="243.0" y="378.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_52" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_14" bpmnElement="SequenceFlow_15" sourceElement="BPMNShape_ScriptTask_15" targetElement="BPMNShape_ExclusiveGateway_3">
        <di:waypoint xsi:type="dc:Point" x="243.0" y="428.0"/>
        <di:waypoint xsi:type="dc:Point" x="243.0" y="481.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_54" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_15" bpmnElement="SequenceFlow_16" sourceElement="BPMNShape_ExclusiveGateway_3" targetElement="BPMNShape_ServiceTask_2">
        <di:waypoint xsi:type="dc:Point" x="218.0" y="506.0"/>
        <di:waypoint xsi:type="dc:Point" x="110.0" y="506.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_55" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_30" bpmnElement="SequenceFlow_31" sourceElement="BPMNShape_ExclusiveGateway_3" targetElement="BPMNShape_ScriptTask_5">
        <di:waypoint xsi:type="dc:Point" x="268.0" y="506.0"/>
        <di:waypoint xsi:type="dc:Point" x="443.0" y="506.0"/>
        <di:waypoint xsi:type="dc:Point" x="443.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_57" labelStyle="BPMNLabelStyle_1"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_40" bpmnElement="SequenceFlow_40" sourceElement="BPMNShape_ExclusiveGateway_2" targetElement="BPMNShape_ExclusiveGateway_7">
        <di:waypoint xsi:type="dc:Point" x="1373.0" y="954.0"/>
        <di:waypoint xsi:type="dc:Point" x="1401.0" y="954.0"/>
        <di:waypoint xsi:type="dc:Point" x="1430.0" y="954.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_70">
          <dc:Bounds height="15.0" width="16.0" x="1395.0" y="955.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_44" bpmnElement="SequenceFlow_44" sourceElement="BPMNShape_ExclusiveGateway_7" targetElement="BPMNShape_ScriptTask_14">
        <di:waypoint xsi:type="dc:Point" x="1455.0" y="979.0"/>
        <di:waypoint xsi:type="dc:Point" x="1455.0" y="1003.0"/>
        <di:waypoint xsi:type="dc:Point" x="1455.0" y="1028.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_71">
          <dc:Bounds height="15.0" width="16.0" x="1448.0" y="1005.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_45" bpmnElement="SequenceFlow_45" sourceElement="BPMNShape_ServiceTask_6" targetElement="BPMNShape_ScriptTask_14">
        <di:waypoint xsi:type="dc:Point" x="1589.0" y="1053.0"/>
        <di:waypoint xsi:type="dc:Point" x="1550.0" y="1053.0"/>
        <di:waypoint xsi:type="dc:Point" x="1510.0" y="1053.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_72"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_46" bpmnElement="SequenceFlow_46" sourceElement="BPMNShape_ExclusiveGateway_7" targetElement="BPMNShape_ServiceTask_10">
        <di:waypoint xsi:type="dc:Point" x="1480.0" y="954.0"/>
        <di:waypoint xsi:type="dc:Point" x="1534.0" y="954.0"/>
        <di:waypoint xsi:type="dc:Point" x="1589.0" y="954.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_74">
          <dc:Bounds height="15.0" width="11.0" x="1530.0" y="955.0"/>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_47" bpmnElement="SequenceFlow_47" sourceElement="BPMNShape_ServiceTask_10" targetElement="BPMNShape_ServiceTask_6">
        <di:waypoint xsi:type="dc:Point" x="1644.0" y="979.0"/>
        <di:waypoint xsi:type="dc:Point" x="1644.0" y="1003.0"/>
        <di:waypoint xsi:type="dc:Point" x="1644.0" y="1028.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_75"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_27" bpmnElement="SequenceFlow_4" sourceElement="BPMNShape_ServiceTask_9" targetElement="BPMNShape_ScriptTask_17">
        <di:waypoint xsi:type="dc:Point" x="498.0" y="834.0"/>
        <di:waypoint xsi:type="dc:Point" x="526.0" y="834.0"/>
        <di:waypoint xsi:type="dc:Point" x="555.0" y="834.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_60"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_28" bpmnElement="SequenceFlow_17" sourceElement="BPMNShape_ScriptTask_17" targetElement="BPMNShape_ScriptTask_7">
        <di:waypoint xsi:type="dc:Point" x="610.0" y="809.0"/>
        <di:waypoint xsi:type="dc:Point" x="610.0" y="780.0"/>
        <di:waypoint xsi:type="dc:Point" x="610.0" y="750.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_61"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_29" bpmnElement="SequenceFlow_29" sourceElement="BPMNShape_ScriptTask_16" targetElement="BPMNShape_ScriptTask_7">
        <di:waypoint xsi:type="dc:Point" x="768.0" y="615.0"/>
        <di:waypoint xsi:type="dc:Point" x="610.0" y="615.0"/>
        <di:waypoint xsi:type="dc:Point" x="610.0" y="700.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_62"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_18" bpmnElement="SequenceFlow_20" sourceElement="BPMNShape_ScriptTask_14" targetElement="BPMNShape_ScriptTask_18">
        <di:waypoint xsi:type="dc:Point" x="1455.0" y="1078.0"/>
        <di:waypoint xsi:type="dc:Point" x="1455.0" y="1099.0"/>
        <di:waypoint xsi:type="dc:Point" x="1455.0" y="1120.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_7"/>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge id="BPMNEdge_SequenceFlow_19" bpmnElement="SequenceFlow_21" sourceElement="BPMNShape_ScriptTask_18" targetElement="BPMNShape_ScriptTask_3">
        <di:waypoint xsi:type="dc:Point" x="1455.0" y="1170.0"/>
        <di:waypoint xsi:type="dc:Point" x="1455.0" y="1199.0"/>
        <di:waypoint xsi:type="dc:Point" x="1456.0" y="1229.0"/>
        <bpmndi:BPMNLabel id="BPMNLabel_23"/>
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
    <bpmndi:BPMNLabelStyle id="BPMNLabelStyle_1">
      <dc:Font name="arial" size="9.0"/>
    </bpmndi:BPMNLabelStyle>
  </bpmndi:BPMNDiagram>
</bpmn2:definitions>